// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

package modifier

//go:generate minimock -i route256.ozon.ru/project/cart/internal/usecases/modifier.productService -o product_service_mock_test.go -n ProductServiceMock -p modifier

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// ProductServiceMock implements productService
type ProductServiceMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcIsItemPresent          func(ctx context.Context, skuId int64) (b1 bool, err error)
	inspectFuncIsItemPresent   func(ctx context.Context, skuId int64)
	afterIsItemPresentCounter  uint64
	beforeIsItemPresentCounter uint64
	IsItemPresentMock          mProductServiceMockIsItemPresent
}

// NewProductServiceMock returns a mock for productService
func NewProductServiceMock(t minimock.Tester) *ProductServiceMock {
	m := &ProductServiceMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.IsItemPresentMock = mProductServiceMockIsItemPresent{mock: m}
	m.IsItemPresentMock.callArgs = []*ProductServiceMockIsItemPresentParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mProductServiceMockIsItemPresent struct {
	mock               *ProductServiceMock
	defaultExpectation *ProductServiceMockIsItemPresentExpectation
	expectations       []*ProductServiceMockIsItemPresentExpectation

	callArgs []*ProductServiceMockIsItemPresentParams
	mutex    sync.RWMutex
}

// ProductServiceMockIsItemPresentExpectation specifies expectation struct of the productService.IsItemPresent
type ProductServiceMockIsItemPresentExpectation struct {
	mock    *ProductServiceMock
	params  *ProductServiceMockIsItemPresentParams
	results *ProductServiceMockIsItemPresentResults
	Counter uint64
}

// ProductServiceMockIsItemPresentParams contains parameters of the productService.IsItemPresent
type ProductServiceMockIsItemPresentParams struct {
	ctx   context.Context
	skuId int64
}

// ProductServiceMockIsItemPresentResults contains results of the productService.IsItemPresent
type ProductServiceMockIsItemPresentResults struct {
	b1  bool
	err error
}

// Expect sets up expected params for productService.IsItemPresent
func (mmIsItemPresent *mProductServiceMockIsItemPresent) Expect(ctx context.Context, skuId int64) *mProductServiceMockIsItemPresent {
	if mmIsItemPresent.mock.funcIsItemPresent != nil {
		mmIsItemPresent.mock.t.Fatalf("ProductServiceMock.IsItemPresent mock is already set by Set")
	}

	if mmIsItemPresent.defaultExpectation == nil {
		mmIsItemPresent.defaultExpectation = &ProductServiceMockIsItemPresentExpectation{}
	}

	mmIsItemPresent.defaultExpectation.params = &ProductServiceMockIsItemPresentParams{ctx, skuId}
	for _, e := range mmIsItemPresent.expectations {
		if minimock.Equal(e.params, mmIsItemPresent.defaultExpectation.params) {
			mmIsItemPresent.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmIsItemPresent.defaultExpectation.params)
		}
	}

	return mmIsItemPresent
}

// Inspect accepts an inspector function that has same arguments as the productService.IsItemPresent
func (mmIsItemPresent *mProductServiceMockIsItemPresent) Inspect(f func(ctx context.Context, skuId int64)) *mProductServiceMockIsItemPresent {
	if mmIsItemPresent.mock.inspectFuncIsItemPresent != nil {
		mmIsItemPresent.mock.t.Fatalf("Inspect function is already set for ProductServiceMock.IsItemPresent")
	}

	mmIsItemPresent.mock.inspectFuncIsItemPresent = f

	return mmIsItemPresent
}

// Return sets up results that will be returned by productService.IsItemPresent
func (mmIsItemPresent *mProductServiceMockIsItemPresent) Return(b1 bool, err error) *ProductServiceMock {
	if mmIsItemPresent.mock.funcIsItemPresent != nil {
		mmIsItemPresent.mock.t.Fatalf("ProductServiceMock.IsItemPresent mock is already set by Set")
	}

	if mmIsItemPresent.defaultExpectation == nil {
		mmIsItemPresent.defaultExpectation = &ProductServiceMockIsItemPresentExpectation{mock: mmIsItemPresent.mock}
	}
	mmIsItemPresent.defaultExpectation.results = &ProductServiceMockIsItemPresentResults{b1, err}
	return mmIsItemPresent.mock
}

// Set uses given function f to mock the productService.IsItemPresent method
func (mmIsItemPresent *mProductServiceMockIsItemPresent) Set(f func(ctx context.Context, skuId int64) (b1 bool, err error)) *ProductServiceMock {
	if mmIsItemPresent.defaultExpectation != nil {
		mmIsItemPresent.mock.t.Fatalf("Default expectation is already set for the productService.IsItemPresent method")
	}

	if len(mmIsItemPresent.expectations) > 0 {
		mmIsItemPresent.mock.t.Fatalf("Some expectations are already set for the productService.IsItemPresent method")
	}

	mmIsItemPresent.mock.funcIsItemPresent = f
	return mmIsItemPresent.mock
}

// When sets expectation for the productService.IsItemPresent which will trigger the result defined by the following
// Then helper
func (mmIsItemPresent *mProductServiceMockIsItemPresent) When(ctx context.Context, skuId int64) *ProductServiceMockIsItemPresentExpectation {
	if mmIsItemPresent.mock.funcIsItemPresent != nil {
		mmIsItemPresent.mock.t.Fatalf("ProductServiceMock.IsItemPresent mock is already set by Set")
	}

	expectation := &ProductServiceMockIsItemPresentExpectation{
		mock:   mmIsItemPresent.mock,
		params: &ProductServiceMockIsItemPresentParams{ctx, skuId},
	}
	mmIsItemPresent.expectations = append(mmIsItemPresent.expectations, expectation)
	return expectation
}

// Then sets up productService.IsItemPresent return parameters for the expectation previously defined by the When method
func (e *ProductServiceMockIsItemPresentExpectation) Then(b1 bool, err error) *ProductServiceMock {
	e.results = &ProductServiceMockIsItemPresentResults{b1, err}
	return e.mock
}

// IsItemPresent implements productService
func (mmIsItemPresent *ProductServiceMock) IsItemPresent(ctx context.Context, skuId int64) (b1 bool, err error) {
	mm_atomic.AddUint64(&mmIsItemPresent.beforeIsItemPresentCounter, 1)
	defer mm_atomic.AddUint64(&mmIsItemPresent.afterIsItemPresentCounter, 1)

	if mmIsItemPresent.inspectFuncIsItemPresent != nil {
		mmIsItemPresent.inspectFuncIsItemPresent(ctx, skuId)
	}

	mm_params := ProductServiceMockIsItemPresentParams{ctx, skuId}

	// Record call args
	mmIsItemPresent.IsItemPresentMock.mutex.Lock()
	mmIsItemPresent.IsItemPresentMock.callArgs = append(mmIsItemPresent.IsItemPresentMock.callArgs, &mm_params)
	mmIsItemPresent.IsItemPresentMock.mutex.Unlock()

	for _, e := range mmIsItemPresent.IsItemPresentMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.b1, e.results.err
		}
	}

	if mmIsItemPresent.IsItemPresentMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmIsItemPresent.IsItemPresentMock.defaultExpectation.Counter, 1)
		mm_want := mmIsItemPresent.IsItemPresentMock.defaultExpectation.params
		mm_got := ProductServiceMockIsItemPresentParams{ctx, skuId}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmIsItemPresent.t.Errorf("ProductServiceMock.IsItemPresent got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmIsItemPresent.IsItemPresentMock.defaultExpectation.results
		if mm_results == nil {
			mmIsItemPresent.t.Fatal("No results are set for the ProductServiceMock.IsItemPresent")
		}
		return (*mm_results).b1, (*mm_results).err
	}
	if mmIsItemPresent.funcIsItemPresent != nil {
		return mmIsItemPresent.funcIsItemPresent(ctx, skuId)
	}
	mmIsItemPresent.t.Fatalf("Unexpected call to ProductServiceMock.IsItemPresent. %v %v", ctx, skuId)
	return
}

// IsItemPresentAfterCounter returns a count of finished ProductServiceMock.IsItemPresent invocations
func (mmIsItemPresent *ProductServiceMock) IsItemPresentAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmIsItemPresent.afterIsItemPresentCounter)
}

// IsItemPresentBeforeCounter returns a count of ProductServiceMock.IsItemPresent invocations
func (mmIsItemPresent *ProductServiceMock) IsItemPresentBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmIsItemPresent.beforeIsItemPresentCounter)
}

// Calls returns a list of arguments used in each call to ProductServiceMock.IsItemPresent.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmIsItemPresent *mProductServiceMockIsItemPresent) Calls() []*ProductServiceMockIsItemPresentParams {
	mmIsItemPresent.mutex.RLock()

	argCopy := make([]*ProductServiceMockIsItemPresentParams, len(mmIsItemPresent.callArgs))
	copy(argCopy, mmIsItemPresent.callArgs)

	mmIsItemPresent.mutex.RUnlock()

	return argCopy
}

// MinimockIsItemPresentDone returns true if the count of the IsItemPresent invocations corresponds
// the number of defined expectations
func (m *ProductServiceMock) MinimockIsItemPresentDone() bool {
	for _, e := range m.IsItemPresentMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.IsItemPresentMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterIsItemPresentCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcIsItemPresent != nil && mm_atomic.LoadUint64(&m.afterIsItemPresentCounter) < 1 {
		return false
	}
	return true
}

// MinimockIsItemPresentInspect logs each unmet expectation
func (m *ProductServiceMock) MinimockIsItemPresentInspect() {
	for _, e := range m.IsItemPresentMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ProductServiceMock.IsItemPresent with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.IsItemPresentMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterIsItemPresentCounter) < 1 {
		if m.IsItemPresentMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to ProductServiceMock.IsItemPresent")
		} else {
			m.t.Errorf("Expected call to ProductServiceMock.IsItemPresent with params: %#v", *m.IsItemPresentMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcIsItemPresent != nil && mm_atomic.LoadUint64(&m.afterIsItemPresentCounter) < 1 {
		m.t.Error("Expected call to ProductServiceMock.IsItemPresent")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ProductServiceMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockIsItemPresentInspect()
			m.t.FailNow()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ProductServiceMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ProductServiceMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockIsItemPresentDone()
}
