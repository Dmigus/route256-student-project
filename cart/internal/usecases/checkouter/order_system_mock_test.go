// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

package checkouter

//go:generate minimock -i route256.ozon.ru/project/cart/internal/usecases/checkouter.orderSystem -o order_system_mock_test.go -n OrderSystemMock -p checkouter

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"route256.ozon.ru/project/cart/internal/models"
)

// OrderSystemMock implements orderSystem
type OrderSystemMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcCreateOrder          func(ctx context.Context, userId int64, items []models.CartItem) (i1 int64, err error)
	inspectFuncCreateOrder   func(ctx context.Context, userId int64, items []models.CartItem)
	afterCreateOrderCounter  uint64
	beforeCreateOrderCounter uint64
	CreateOrderMock          mOrderSystemMockCreateOrder
}

// NewOrderSystemMock returns a mock for orderSystem
func NewOrderSystemMock(t minimock.Tester) *OrderSystemMock {
	m := &OrderSystemMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CreateOrderMock = mOrderSystemMockCreateOrder{mock: m}
	m.CreateOrderMock.callArgs = []*OrderSystemMockCreateOrderParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mOrderSystemMockCreateOrder struct {
	mock               *OrderSystemMock
	defaultExpectation *OrderSystemMockCreateOrderExpectation
	expectations       []*OrderSystemMockCreateOrderExpectation

	callArgs []*OrderSystemMockCreateOrderParams
	mutex    sync.RWMutex
}

// OrderSystemMockCreateOrderExpectation specifies expectation struct of the orderSystem.CreateOrder
type OrderSystemMockCreateOrderExpectation struct {
	mock    *OrderSystemMock
	params  *OrderSystemMockCreateOrderParams
	results *OrderSystemMockCreateOrderResults
	Counter uint64
}

// OrderSystemMockCreateOrderParams contains parameters of the orderSystem.CreateOrder
type OrderSystemMockCreateOrderParams struct {
	ctx    context.Context
	userId int64
	items  []models.CartItem
}

// OrderSystemMockCreateOrderResults contains results of the orderSystem.CreateOrder
type OrderSystemMockCreateOrderResults struct {
	i1  int64
	err error
}

// Expect sets up expected params for orderSystem.CreateOrder
func (mmCreateOrder *mOrderSystemMockCreateOrder) Expect(ctx context.Context, userId int64, items []models.CartItem) *mOrderSystemMockCreateOrder {
	if mmCreateOrder.mock.funcCreateOrder != nil {
		mmCreateOrder.mock.t.Fatalf("OrderSystemMock.CreateOrder mock is already set by Set")
	}

	if mmCreateOrder.defaultExpectation == nil {
		mmCreateOrder.defaultExpectation = &OrderSystemMockCreateOrderExpectation{}
	}

	mmCreateOrder.defaultExpectation.params = &OrderSystemMockCreateOrderParams{ctx, userId, items}
	for _, e := range mmCreateOrder.expectations {
		if minimock.Equal(e.params, mmCreateOrder.defaultExpectation.params) {
			mmCreateOrder.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreateOrder.defaultExpectation.params)
		}
	}

	return mmCreateOrder
}

// Inspect accepts an inspector function that has same arguments as the orderSystem.CreateOrder
func (mmCreateOrder *mOrderSystemMockCreateOrder) Inspect(f func(ctx context.Context, userId int64, items []models.CartItem)) *mOrderSystemMockCreateOrder {
	if mmCreateOrder.mock.inspectFuncCreateOrder != nil {
		mmCreateOrder.mock.t.Fatalf("Inspect function is already set for OrderSystemMock.CreateOrder")
	}

	mmCreateOrder.mock.inspectFuncCreateOrder = f

	return mmCreateOrder
}

// Return sets up results that will be returned by orderSystem.CreateOrder
func (mmCreateOrder *mOrderSystemMockCreateOrder) Return(i1 int64, err error) *OrderSystemMock {
	if mmCreateOrder.mock.funcCreateOrder != nil {
		mmCreateOrder.mock.t.Fatalf("OrderSystemMock.CreateOrder mock is already set by Set")
	}

	if mmCreateOrder.defaultExpectation == nil {
		mmCreateOrder.defaultExpectation = &OrderSystemMockCreateOrderExpectation{mock: mmCreateOrder.mock}
	}
	mmCreateOrder.defaultExpectation.results = &OrderSystemMockCreateOrderResults{i1, err}
	return mmCreateOrder.mock
}

// Set uses given function f to mock the orderSystem.CreateOrder method
func (mmCreateOrder *mOrderSystemMockCreateOrder) Set(f func(ctx context.Context, userId int64, items []models.CartItem) (i1 int64, err error)) *OrderSystemMock {
	if mmCreateOrder.defaultExpectation != nil {
		mmCreateOrder.mock.t.Fatalf("Default expectation is already set for the orderSystem.CreateOrder method")
	}

	if len(mmCreateOrder.expectations) > 0 {
		mmCreateOrder.mock.t.Fatalf("Some expectations are already set for the orderSystem.CreateOrder method")
	}

	mmCreateOrder.mock.funcCreateOrder = f
	return mmCreateOrder.mock
}

// When sets expectation for the orderSystem.CreateOrder which will trigger the result defined by the following
// Then helper
func (mmCreateOrder *mOrderSystemMockCreateOrder) When(ctx context.Context, userId int64, items []models.CartItem) *OrderSystemMockCreateOrderExpectation {
	if mmCreateOrder.mock.funcCreateOrder != nil {
		mmCreateOrder.mock.t.Fatalf("OrderSystemMock.CreateOrder mock is already set by Set")
	}

	expectation := &OrderSystemMockCreateOrderExpectation{
		mock:   mmCreateOrder.mock,
		params: &OrderSystemMockCreateOrderParams{ctx, userId, items},
	}
	mmCreateOrder.expectations = append(mmCreateOrder.expectations, expectation)
	return expectation
}

// Then sets up orderSystem.CreateOrder return parameters for the expectation previously defined by the When method
func (e *OrderSystemMockCreateOrderExpectation) Then(i1 int64, err error) *OrderSystemMock {
	e.results = &OrderSystemMockCreateOrderResults{i1, err}
	return e.mock
}

// CreateOrder implements orderSystem
func (mmCreateOrder *OrderSystemMock) CreateOrder(ctx context.Context, userId int64, items []models.CartItem) (i1 int64, err error) {
	mm_atomic.AddUint64(&mmCreateOrder.beforeCreateOrderCounter, 1)
	defer mm_atomic.AddUint64(&mmCreateOrder.afterCreateOrderCounter, 1)

	if mmCreateOrder.inspectFuncCreateOrder != nil {
		mmCreateOrder.inspectFuncCreateOrder(ctx, userId, items)
	}

	mm_params := OrderSystemMockCreateOrderParams{ctx, userId, items}

	// Record call args
	mmCreateOrder.CreateOrderMock.mutex.Lock()
	mmCreateOrder.CreateOrderMock.callArgs = append(mmCreateOrder.CreateOrderMock.callArgs, &mm_params)
	mmCreateOrder.CreateOrderMock.mutex.Unlock()

	for _, e := range mmCreateOrder.CreateOrderMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.i1, e.results.err
		}
	}

	if mmCreateOrder.CreateOrderMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreateOrder.CreateOrderMock.defaultExpectation.Counter, 1)
		mm_want := mmCreateOrder.CreateOrderMock.defaultExpectation.params
		mm_got := OrderSystemMockCreateOrderParams{ctx, userId, items}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreateOrder.t.Errorf("OrderSystemMock.CreateOrder got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreateOrder.CreateOrderMock.defaultExpectation.results
		if mm_results == nil {
			mmCreateOrder.t.Fatal("No results are set for the OrderSystemMock.CreateOrder")
		}
		return (*mm_results).i1, (*mm_results).err
	}
	if mmCreateOrder.funcCreateOrder != nil {
		return mmCreateOrder.funcCreateOrder(ctx, userId, items)
	}
	mmCreateOrder.t.Fatalf("Unexpected call to OrderSystemMock.CreateOrder. %v %v %v", ctx, userId, items)
	return
}

// CreateOrderAfterCounter returns a count of finished OrderSystemMock.CreateOrder invocations
func (mmCreateOrder *OrderSystemMock) CreateOrderAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateOrder.afterCreateOrderCounter)
}

// CreateOrderBeforeCounter returns a count of OrderSystemMock.CreateOrder invocations
func (mmCreateOrder *OrderSystemMock) CreateOrderBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateOrder.beforeCreateOrderCounter)
}

// Calls returns a list of arguments used in each call to OrderSystemMock.CreateOrder.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreateOrder *mOrderSystemMockCreateOrder) Calls() []*OrderSystemMockCreateOrderParams {
	mmCreateOrder.mutex.RLock()

	argCopy := make([]*OrderSystemMockCreateOrderParams, len(mmCreateOrder.callArgs))
	copy(argCopy, mmCreateOrder.callArgs)

	mmCreateOrder.mutex.RUnlock()

	return argCopy
}

// MinimockCreateOrderDone returns true if the count of the CreateOrder invocations corresponds
// the number of defined expectations
func (m *OrderSystemMock) MinimockCreateOrderDone() bool {
	for _, e := range m.CreateOrderMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CreateOrderMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCreateOrderCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateOrder != nil && mm_atomic.LoadUint64(&m.afterCreateOrderCounter) < 1 {
		return false
	}
	return true
}

// MinimockCreateOrderInspect logs each unmet expectation
func (m *OrderSystemMock) MinimockCreateOrderInspect() {
	for _, e := range m.CreateOrderMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to OrderSystemMock.CreateOrder with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CreateOrderMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCreateOrderCounter) < 1 {
		if m.CreateOrderMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to OrderSystemMock.CreateOrder")
		} else {
			m.t.Errorf("Expected call to OrderSystemMock.CreateOrder with params: %#v", *m.CreateOrderMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateOrder != nil && mm_atomic.LoadUint64(&m.afterCreateOrderCounter) < 1 {
		m.t.Error("Expected call to OrderSystemMock.CreateOrder")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *OrderSystemMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockCreateOrderInspect()
			m.t.FailNow()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *OrderSystemMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *OrderSystemMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCreateOrderDone()
}
