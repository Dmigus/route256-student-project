// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

package retriablehttp

//go:generate minimock -i route256.ozon.ru/project/cart/internal/client.retryPolicy -o retry_policy_mock_test.go -n RetryPolicyMock -p client

import (
	"net/http"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// RetryPolicyMock implements retryPolicy
type RetryPolicyMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcShouldBeRetried          func(attempts int, req *http.Request, resp *http.Response, respErr error) (b1 bool)
	inspectFuncShouldBeRetried   func(attempts int, req *http.Request, resp *http.Response, respErr error)
	afterShouldBeRetriedCounter  uint64
	beforeShouldBeRetriedCounter uint64
	ShouldBeRetriedMock          mRetryPolicyMockShouldBeRetried
}

// NewRetryPolicyMock returns a mock for retryPolicy
func NewRetryPolicyMock(t minimock.Tester) *RetryPolicyMock {
	m := &RetryPolicyMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.ShouldBeRetriedMock = mRetryPolicyMockShouldBeRetried{mock: m}
	m.ShouldBeRetriedMock.callArgs = []*RetryPolicyMockShouldBeRetriedParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mRetryPolicyMockShouldBeRetried struct {
	mock               *RetryPolicyMock
	defaultExpectation *RetryPolicyMockShouldBeRetriedExpectation
	expectations       []*RetryPolicyMockShouldBeRetriedExpectation

	callArgs []*RetryPolicyMockShouldBeRetriedParams
	mutex    sync.RWMutex
}

// RetryPolicyMockShouldBeRetriedExpectation specifies expectation struct of the retryPolicy.ShouldBeRetried
type RetryPolicyMockShouldBeRetriedExpectation struct {
	mock    *RetryPolicyMock
	params  *RetryPolicyMockShouldBeRetriedParams
	results *RetryPolicyMockShouldBeRetriedResults
	Counter uint64
}

// RetryPolicyMockShouldBeRetriedParams contains parameters of the retryPolicy.ShouldBeRetried
type RetryPolicyMockShouldBeRetriedParams struct {
	attempts int
	req      *http.Request
	resp     *http.Response
	respErr  error
}

// RetryPolicyMockShouldBeRetriedResults contains results of the retryPolicy.ShouldBeRetried
type RetryPolicyMockShouldBeRetriedResults struct {
	b1 bool
}

// Expect sets up expected params for retryPolicy.ShouldBeRetried
func (mmShouldBeRetried *mRetryPolicyMockShouldBeRetried) Expect(attempts int, req *http.Request, resp *http.Response, respErr error) *mRetryPolicyMockShouldBeRetried {
	if mmShouldBeRetried.mock.funcShouldBeRetried != nil {
		mmShouldBeRetried.mock.t.Fatalf("RetryPolicyMock.ShouldBeRetried mock is already set by Set")
	}

	if mmShouldBeRetried.defaultExpectation == nil {
		mmShouldBeRetried.defaultExpectation = &RetryPolicyMockShouldBeRetriedExpectation{}
	}

	mmShouldBeRetried.defaultExpectation.params = &RetryPolicyMockShouldBeRetriedParams{attempts, req, resp, respErr}
	for _, e := range mmShouldBeRetried.expectations {
		if minimock.Equal(e.params, mmShouldBeRetried.defaultExpectation.params) {
			mmShouldBeRetried.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmShouldBeRetried.defaultExpectation.params)
		}
	}

	return mmShouldBeRetried
}

// Inspect accepts an inspector function that has same arguments as the retryPolicy.ShouldBeRetried
func (mmShouldBeRetried *mRetryPolicyMockShouldBeRetried) Inspect(f func(attempts int, req *http.Request, resp *http.Response, respErr error)) *mRetryPolicyMockShouldBeRetried {
	if mmShouldBeRetried.mock.inspectFuncShouldBeRetried != nil {
		mmShouldBeRetried.mock.t.Fatalf("Inspect function is already set for RetryPolicyMock.ShouldBeRetried")
	}

	mmShouldBeRetried.mock.inspectFuncShouldBeRetried = f

	return mmShouldBeRetried
}

// Return sets up results that will be returned by retryPolicy.ShouldBeRetried
func (mmShouldBeRetried *mRetryPolicyMockShouldBeRetried) Return(b1 bool) *RetryPolicyMock {
	if mmShouldBeRetried.mock.funcShouldBeRetried != nil {
		mmShouldBeRetried.mock.t.Fatalf("RetryPolicyMock.ShouldBeRetried mock is already set by Set")
	}

	if mmShouldBeRetried.defaultExpectation == nil {
		mmShouldBeRetried.defaultExpectation = &RetryPolicyMockShouldBeRetriedExpectation{mock: mmShouldBeRetried.mock}
	}
	mmShouldBeRetried.defaultExpectation.results = &RetryPolicyMockShouldBeRetriedResults{b1}
	return mmShouldBeRetried.mock
}

// Set uses given function f to mock the retryPolicy.ShouldBeRetried method
func (mmShouldBeRetried *mRetryPolicyMockShouldBeRetried) Set(f func(attempts int, req *http.Request, resp *http.Response, respErr error) (b1 bool)) *RetryPolicyMock {
	if mmShouldBeRetried.defaultExpectation != nil {
		mmShouldBeRetried.mock.t.Fatalf("Default expectation is already set for the retryPolicy.ShouldBeRetried method")
	}

	if len(mmShouldBeRetried.expectations) > 0 {
		mmShouldBeRetried.mock.t.Fatalf("Some expectations are already set for the retryPolicy.ShouldBeRetried method")
	}

	mmShouldBeRetried.mock.funcShouldBeRetried = f
	return mmShouldBeRetried.mock
}

// When sets expectation for the retryPolicy.ShouldBeRetried which will trigger the result defined by the following
// Then helper
func (mmShouldBeRetried *mRetryPolicyMockShouldBeRetried) When(attempts int, req *http.Request, resp *http.Response, respErr error) *RetryPolicyMockShouldBeRetriedExpectation {
	if mmShouldBeRetried.mock.funcShouldBeRetried != nil {
		mmShouldBeRetried.mock.t.Fatalf("RetryPolicyMock.ShouldBeRetried mock is already set by Set")
	}

	expectation := &RetryPolicyMockShouldBeRetriedExpectation{
		mock:   mmShouldBeRetried.mock,
		params: &RetryPolicyMockShouldBeRetriedParams{attempts, req, resp, respErr},
	}
	mmShouldBeRetried.expectations = append(mmShouldBeRetried.expectations, expectation)
	return expectation
}

// Then sets up retryPolicy.ShouldBeRetried return parameters for the expectation previously defined by the When method
func (e *RetryPolicyMockShouldBeRetriedExpectation) Then(b1 bool) *RetryPolicyMock {
	e.results = &RetryPolicyMockShouldBeRetriedResults{b1}
	return e.mock
}

// ShouldBeRetried implements retryPolicy
func (mmShouldBeRetried *RetryPolicyMock) ShouldBeRetried(attempts int, req *http.Request, resp *http.Response, respErr error) (b1 bool) {
	mm_atomic.AddUint64(&mmShouldBeRetried.beforeShouldBeRetriedCounter, 1)
	defer mm_atomic.AddUint64(&mmShouldBeRetried.afterShouldBeRetriedCounter, 1)

	if mmShouldBeRetried.inspectFuncShouldBeRetried != nil {
		mmShouldBeRetried.inspectFuncShouldBeRetried(attempts, req, resp, respErr)
	}

	mm_params := RetryPolicyMockShouldBeRetriedParams{attempts, req, resp, respErr}

	// Record call args
	mmShouldBeRetried.ShouldBeRetriedMock.mutex.Lock()
	mmShouldBeRetried.ShouldBeRetriedMock.callArgs = append(mmShouldBeRetried.ShouldBeRetriedMock.callArgs, &mm_params)
	mmShouldBeRetried.ShouldBeRetriedMock.mutex.Unlock()

	for _, e := range mmShouldBeRetried.ShouldBeRetriedMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.b1
		}
	}

	if mmShouldBeRetried.ShouldBeRetriedMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmShouldBeRetried.ShouldBeRetriedMock.defaultExpectation.Counter, 1)
		mm_want := mmShouldBeRetried.ShouldBeRetriedMock.defaultExpectation.params
		mm_got := RetryPolicyMockShouldBeRetriedParams{attempts, req, resp, respErr}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmShouldBeRetried.t.Errorf("RetryPolicyMock.ShouldBeRetried got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmShouldBeRetried.ShouldBeRetriedMock.defaultExpectation.results
		if mm_results == nil {
			mmShouldBeRetried.t.Fatal("No results are set for the RetryPolicyMock.ShouldBeRetried")
		}
		return (*mm_results).b1
	}
	if mmShouldBeRetried.funcShouldBeRetried != nil {
		return mmShouldBeRetried.funcShouldBeRetried(attempts, req, resp, respErr)
	}
	mmShouldBeRetried.t.Fatalf("Unexpected call to RetryPolicyMock.ShouldBeRetried. %v %v %v %v", attempts, req, resp, respErr)
	return
}

// ShouldBeRetriedAfterCounter returns a count of finished RetryPolicyMock.ShouldBeRetried invocations
func (mmShouldBeRetried *RetryPolicyMock) ShouldBeRetriedAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmShouldBeRetried.afterShouldBeRetriedCounter)
}

// ShouldBeRetriedBeforeCounter returns a count of RetryPolicyMock.ShouldBeRetried invocations
func (mmShouldBeRetried *RetryPolicyMock) ShouldBeRetriedBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmShouldBeRetried.beforeShouldBeRetriedCounter)
}

// Calls returns a list of arguments used in each call to RetryPolicyMock.ShouldBeRetried.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmShouldBeRetried *mRetryPolicyMockShouldBeRetried) Calls() []*RetryPolicyMockShouldBeRetriedParams {
	mmShouldBeRetried.mutex.RLock()

	argCopy := make([]*RetryPolicyMockShouldBeRetriedParams, len(mmShouldBeRetried.callArgs))
	copy(argCopy, mmShouldBeRetried.callArgs)

	mmShouldBeRetried.mutex.RUnlock()

	return argCopy
}

// MinimockShouldBeRetriedDone returns true if the count of the ShouldBeRetried invocations corresponds
// the number of defined expectations
func (m *RetryPolicyMock) MinimockShouldBeRetriedDone() bool {
	for _, e := range m.ShouldBeRetriedMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ShouldBeRetriedMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterShouldBeRetriedCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcShouldBeRetried != nil && mm_atomic.LoadUint64(&m.afterShouldBeRetriedCounter) < 1 {
		return false
	}
	return true
}

// MinimockShouldBeRetriedInspect logs each unmet expectation
func (m *RetryPolicyMock) MinimockShouldBeRetriedInspect() {
	for _, e := range m.ShouldBeRetriedMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to RetryPolicyMock.ShouldBeRetried with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ShouldBeRetriedMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterShouldBeRetriedCounter) < 1 {
		if m.ShouldBeRetriedMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to RetryPolicyMock.ShouldBeRetried")
		} else {
			m.t.Errorf("Expected call to RetryPolicyMock.ShouldBeRetried with params: %#v", *m.ShouldBeRetriedMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcShouldBeRetried != nil && mm_atomic.LoadUint64(&m.afterShouldBeRetriedCounter) < 1 {
		m.t.Error("Expected call to RetryPolicyMock.ShouldBeRetried")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *RetryPolicyMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockShouldBeRetriedInspect()
			m.t.FailNow()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *RetryPolicyMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *RetryPolicyMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockShouldBeRetriedDone()
}
