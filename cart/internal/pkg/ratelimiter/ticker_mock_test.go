// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

package ratelimiter

//go:generate minimock -i route256.ozon.ru/project/cart/internal/pkg/ratelimiter.ticker -o ticker_mock_test.go -n TickerMock -p ratelimiter

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// TickerMock implements ticker
type TickerMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcGetTickCh func() (ch1 <-chan struct {
	})
	inspectFuncGetTickCh   func()
	afterGetTickChCounter  uint64
	beforeGetTickChCounter uint64
	GetTickChMock          mTickerMockGetTickCh

	funcStart          func()
	inspectFuncStart   func()
	afterStartCounter  uint64
	beforeStartCounter uint64
	StartMock          mTickerMockStart

	funcStop          func()
	inspectFuncStop   func()
	afterStopCounter  uint64
	beforeStopCounter uint64
	StopMock          mTickerMockStop
}

// NewTickerMock returns a mock for ticker
func NewTickerMock(t minimock.Tester) *TickerMock {
	m := &TickerMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetTickChMock = mTickerMockGetTickCh{mock: m}

	m.StartMock = mTickerMockStart{mock: m}

	m.StopMock = mTickerMockStop{mock: m}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mTickerMockGetTickCh struct {
	mock               *TickerMock
	defaultExpectation *TickerMockGetTickChExpectation
	expectations       []*TickerMockGetTickChExpectation
}

// TickerMockGetTickChExpectation specifies expectation struct of the ticker.GetTickCh
type TickerMockGetTickChExpectation struct {
	mock *TickerMock

	results *TickerMockGetTickChResults
	Counter uint64
}

// TickerMockGetTickChResults contains results of the ticker.GetTickCh
type TickerMockGetTickChResults struct {
	ch1 <-chan struct {
	}
}

// Expect sets up expected params for ticker.GetTickCh
func (mmGetTickCh *mTickerMockGetTickCh) Expect() *mTickerMockGetTickCh {
	if mmGetTickCh.mock.funcGetTickCh != nil {
		mmGetTickCh.mock.t.Fatalf("TickerMock.GetTickCh mock is already set by Set")
	}

	if mmGetTickCh.defaultExpectation == nil {
		mmGetTickCh.defaultExpectation = &TickerMockGetTickChExpectation{}
	}

	return mmGetTickCh
}

// Inspect accepts an inspector function that has same arguments as the ticker.GetTickCh
func (mmGetTickCh *mTickerMockGetTickCh) Inspect(f func()) *mTickerMockGetTickCh {
	if mmGetTickCh.mock.inspectFuncGetTickCh != nil {
		mmGetTickCh.mock.t.Fatalf("Inspect function is already set for TickerMock.GetTickCh")
	}

	mmGetTickCh.mock.inspectFuncGetTickCh = f

	return mmGetTickCh
}

// Return sets up results that will be returned by ticker.GetTickCh
func (mmGetTickCh *mTickerMockGetTickCh) Return(ch1 <-chan struct {
}) *TickerMock {
	if mmGetTickCh.mock.funcGetTickCh != nil {
		mmGetTickCh.mock.t.Fatalf("TickerMock.GetTickCh mock is already set by Set")
	}

	if mmGetTickCh.defaultExpectation == nil {
		mmGetTickCh.defaultExpectation = &TickerMockGetTickChExpectation{mock: mmGetTickCh.mock}
	}
	mmGetTickCh.defaultExpectation.results = &TickerMockGetTickChResults{ch1}
	return mmGetTickCh.mock
}

// Set uses given function f to mock the ticker.GetTickCh method
func (mmGetTickCh *mTickerMockGetTickCh) Set(f func() (ch1 <-chan struct {
})) *TickerMock {
	if mmGetTickCh.defaultExpectation != nil {
		mmGetTickCh.mock.t.Fatalf("Default expectation is already set for the ticker.GetTickCh method")
	}

	if len(mmGetTickCh.expectations) > 0 {
		mmGetTickCh.mock.t.Fatalf("Some expectations are already set for the ticker.GetTickCh method")
	}

	mmGetTickCh.mock.funcGetTickCh = f
	return mmGetTickCh.mock
}

// GetTickCh implements ticker
func (mmGetTickCh *TickerMock) GetTickCh() (ch1 <-chan struct {
}) {
	mm_atomic.AddUint64(&mmGetTickCh.beforeGetTickChCounter, 1)
	defer mm_atomic.AddUint64(&mmGetTickCh.afterGetTickChCounter, 1)

	if mmGetTickCh.inspectFuncGetTickCh != nil {
		mmGetTickCh.inspectFuncGetTickCh()
	}

	if mmGetTickCh.GetTickChMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetTickCh.GetTickChMock.defaultExpectation.Counter, 1)

		mm_results := mmGetTickCh.GetTickChMock.defaultExpectation.results
		if mm_results == nil {
			mmGetTickCh.t.Fatal("No results are set for the TickerMock.GetTickCh")
		}
		return (*mm_results).ch1
	}
	if mmGetTickCh.funcGetTickCh != nil {
		return mmGetTickCh.funcGetTickCh()
	}
	mmGetTickCh.t.Fatalf("Unexpected call to TickerMock.GetTickCh.")
	return
}

// GetTickChAfterCounter returns a count of finished TickerMock.GetTickCh invocations
func (mmGetTickCh *TickerMock) GetTickChAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetTickCh.afterGetTickChCounter)
}

// GetTickChBeforeCounter returns a count of TickerMock.GetTickCh invocations
func (mmGetTickCh *TickerMock) GetTickChBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetTickCh.beforeGetTickChCounter)
}

// MinimockGetTickChDone returns true if the count of the GetTickCh invocations corresponds
// the number of defined expectations
func (m *TickerMock) MinimockGetTickChDone() bool {
	for _, e := range m.GetTickChMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetTickChMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetTickChCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetTickCh != nil && mm_atomic.LoadUint64(&m.afterGetTickChCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetTickChInspect logs each unmet expectation
func (m *TickerMock) MinimockGetTickChInspect() {
	for _, e := range m.GetTickChMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to TickerMock.GetTickCh")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetTickChMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetTickChCounter) < 1 {
		m.t.Error("Expected call to TickerMock.GetTickCh")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetTickCh != nil && mm_atomic.LoadUint64(&m.afterGetTickChCounter) < 1 {
		m.t.Error("Expected call to TickerMock.GetTickCh")
	}
}

type mTickerMockStart struct {
	mock               *TickerMock
	defaultExpectation *TickerMockStartExpectation
	expectations       []*TickerMockStartExpectation
}

// TickerMockStartExpectation specifies expectation struct of the ticker.Start
type TickerMockStartExpectation struct {
	mock *TickerMock

	Counter uint64
}

// Expect sets up expected params for ticker.Start
func (mmStart *mTickerMockStart) Expect() *mTickerMockStart {
	if mmStart.mock.funcStart != nil {
		mmStart.mock.t.Fatalf("TickerMock.Start mock is already set by Set")
	}

	if mmStart.defaultExpectation == nil {
		mmStart.defaultExpectation = &TickerMockStartExpectation{}
	}

	return mmStart
}

// Inspect accepts an inspector function that has same arguments as the ticker.Start
func (mmStart *mTickerMockStart) Inspect(f func()) *mTickerMockStart {
	if mmStart.mock.inspectFuncStart != nil {
		mmStart.mock.t.Fatalf("Inspect function is already set for TickerMock.Start")
	}

	mmStart.mock.inspectFuncStart = f

	return mmStart
}

// Return sets up results that will be returned by ticker.Start
func (mmStart *mTickerMockStart) Return() *TickerMock {
	if mmStart.mock.funcStart != nil {
		mmStart.mock.t.Fatalf("TickerMock.Start mock is already set by Set")
	}

	if mmStart.defaultExpectation == nil {
		mmStart.defaultExpectation = &TickerMockStartExpectation{mock: mmStart.mock}
	}

	return mmStart.mock
}

// Set uses given function f to mock the ticker.Start method
func (mmStart *mTickerMockStart) Set(f func()) *TickerMock {
	if mmStart.defaultExpectation != nil {
		mmStart.mock.t.Fatalf("Default expectation is already set for the ticker.Start method")
	}

	if len(mmStart.expectations) > 0 {
		mmStart.mock.t.Fatalf("Some expectations are already set for the ticker.Start method")
	}

	mmStart.mock.funcStart = f
	return mmStart.mock
}

// Start implements ticker
func (mmStart *TickerMock) Start() {
	mm_atomic.AddUint64(&mmStart.beforeStartCounter, 1)
	defer mm_atomic.AddUint64(&mmStart.afterStartCounter, 1)

	if mmStart.inspectFuncStart != nil {
		mmStart.inspectFuncStart()
	}

	if mmStart.StartMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmStart.StartMock.defaultExpectation.Counter, 1)

		return

	}
	if mmStart.funcStart != nil {
		mmStart.funcStart()
		return
	}
	mmStart.t.Fatalf("Unexpected call to TickerMock.Start.")

}

// StartAfterCounter returns a count of finished TickerMock.Start invocations
func (mmStart *TickerMock) StartAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmStart.afterStartCounter)
}

// StartBeforeCounter returns a count of TickerMock.Start invocations
func (mmStart *TickerMock) StartBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmStart.beforeStartCounter)
}

// MinimockStartDone returns true if the count of the Start invocations corresponds
// the number of defined expectations
func (m *TickerMock) MinimockStartDone() bool {
	for _, e := range m.StartMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.StartMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterStartCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcStart != nil && mm_atomic.LoadUint64(&m.afterStartCounter) < 1 {
		return false
	}
	return true
}

// MinimockStartInspect logs each unmet expectation
func (m *TickerMock) MinimockStartInspect() {
	for _, e := range m.StartMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to TickerMock.Start")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.StartMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterStartCounter) < 1 {
		m.t.Error("Expected call to TickerMock.Start")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcStart != nil && mm_atomic.LoadUint64(&m.afterStartCounter) < 1 {
		m.t.Error("Expected call to TickerMock.Start")
	}
}

type mTickerMockStop struct {
	mock               *TickerMock
	defaultExpectation *TickerMockStopExpectation
	expectations       []*TickerMockStopExpectation
}

// TickerMockStopExpectation specifies expectation struct of the ticker.Stop
type TickerMockStopExpectation struct {
	mock *TickerMock

	Counter uint64
}

// Expect sets up expected params for ticker.Stop
func (mmStop *mTickerMockStop) Expect() *mTickerMockStop {
	if mmStop.mock.funcStop != nil {
		mmStop.mock.t.Fatalf("TickerMock.Stop mock is already set by Set")
	}

	if mmStop.defaultExpectation == nil {
		mmStop.defaultExpectation = &TickerMockStopExpectation{}
	}

	return mmStop
}

// Inspect accepts an inspector function that has same arguments as the ticker.Stop
func (mmStop *mTickerMockStop) Inspect(f func()) *mTickerMockStop {
	if mmStop.mock.inspectFuncStop != nil {
		mmStop.mock.t.Fatalf("Inspect function is already set for TickerMock.Stop")
	}

	mmStop.mock.inspectFuncStop = f

	return mmStop
}

// Return sets up results that will be returned by ticker.Stop
func (mmStop *mTickerMockStop) Return() *TickerMock {
	if mmStop.mock.funcStop != nil {
		mmStop.mock.t.Fatalf("TickerMock.Stop mock is already set by Set")
	}

	if mmStop.defaultExpectation == nil {
		mmStop.defaultExpectation = &TickerMockStopExpectation{mock: mmStop.mock}
	}

	return mmStop.mock
}

// Set uses given function f to mock the ticker.Stop method
func (mmStop *mTickerMockStop) Set(f func()) *TickerMock {
	if mmStop.defaultExpectation != nil {
		mmStop.mock.t.Fatalf("Default expectation is already set for the ticker.Stop method")
	}

	if len(mmStop.expectations) > 0 {
		mmStop.mock.t.Fatalf("Some expectations are already set for the ticker.Stop method")
	}

	mmStop.mock.funcStop = f
	return mmStop.mock
}

// Stop implements ticker
func (mmStop *TickerMock) Stop() {
	mm_atomic.AddUint64(&mmStop.beforeStopCounter, 1)
	defer mm_atomic.AddUint64(&mmStop.afterStopCounter, 1)

	if mmStop.inspectFuncStop != nil {
		mmStop.inspectFuncStop()
	}

	if mmStop.StopMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmStop.StopMock.defaultExpectation.Counter, 1)

		return

	}
	if mmStop.funcStop != nil {
		mmStop.funcStop()
		return
	}
	mmStop.t.Fatalf("Unexpected call to TickerMock.Stop.")

}

// StopAfterCounter returns a count of finished TickerMock.Stop invocations
func (mmStop *TickerMock) StopAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmStop.afterStopCounter)
}

// StopBeforeCounter returns a count of TickerMock.Stop invocations
func (mmStop *TickerMock) StopBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmStop.beforeStopCounter)
}

// MinimockStopDone returns true if the count of the Stop invocations corresponds
// the number of defined expectations
func (m *TickerMock) MinimockStopDone() bool {
	for _, e := range m.StopMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.StopMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterStopCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcStop != nil && mm_atomic.LoadUint64(&m.afterStopCounter) < 1 {
		return false
	}
	return true
}

// MinimockStopInspect logs each unmet expectation
func (m *TickerMock) MinimockStopInspect() {
	for _, e := range m.StopMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to TickerMock.Stop")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.StopMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterStopCounter) < 1 {
		m.t.Error("Expected call to TickerMock.Stop")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcStop != nil && mm_atomic.LoadUint64(&m.afterStopCounter) < 1 {
		m.t.Error("Expected call to TickerMock.Stop")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *TickerMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockGetTickChInspect()

			m.MinimockStartInspect()

			m.MinimockStopInspect()
			m.t.FailNow()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *TickerMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *TickerMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetTickChDone() &&
		m.MinimockStartDone() &&
		m.MinimockStopDone()
}
