// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

package productinfogetter

//go:generate minimock -i route256.ozon.ru/project/cart/internal/providers/productservice/productinfogetter.callPerformer -o call_performer_mock_test.go -n CallPerformerMock -p productinfogetter

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"route256.ozon.ru/project/cart/internal/providers/productservice"
)

// CallPerformerMock implements callPerformer
type CallPerformerMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcPerform          func(ctx context.Context, method string, reqBody productservice.RequestWithSettableToken, respBody any) (err error)
	inspectFuncPerform   func(ctx context.Context, method string, reqBody productservice.RequestWithSettableToken, respBody any)
	afterPerformCounter  uint64
	beforePerformCounter uint64
	PerformMock          mCallPerformerMockPerform
}

// NewCallPerformerMock returns a mock for callPerformer
func NewCallPerformerMock(t minimock.Tester) *CallPerformerMock {
	m := &CallPerformerMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.PerformMock = mCallPerformerMockPerform{mock: m}
	m.PerformMock.callArgs = []*CallPerformerMockPerformParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mCallPerformerMockPerform struct {
	mock               *CallPerformerMock
	defaultExpectation *CallPerformerMockPerformExpectation
	expectations       []*CallPerformerMockPerformExpectation

	callArgs []*CallPerformerMockPerformParams
	mutex    sync.RWMutex
}

// CallPerformerMockPerformExpectation specifies expectation struct of the callPerformer.Perform
type CallPerformerMockPerformExpectation struct {
	mock    *CallPerformerMock
	params  *CallPerformerMockPerformParams
	results *CallPerformerMockPerformResults
	Counter uint64
}

// CallPerformerMockPerformParams contains parameters of the callPerformer.Perform
type CallPerformerMockPerformParams struct {
	ctx      context.Context
	method   string
	reqBody  productservice.RequestWithSettableToken
	respBody any
}

// CallPerformerMockPerformResults contains results of the callPerformer.Perform
type CallPerformerMockPerformResults struct {
	err error
}

// Expect sets up expected params for callPerformer.Perform
func (mmPerform *mCallPerformerMockPerform) Expect(ctx context.Context, method string, reqBody productservice.RequestWithSettableToken, respBody any) *mCallPerformerMockPerform {
	if mmPerform.mock.funcPerform != nil {
		mmPerform.mock.t.Fatalf("CallPerformerMock.Perform mock is already set by Set")
	}

	if mmPerform.defaultExpectation == nil {
		mmPerform.defaultExpectation = &CallPerformerMockPerformExpectation{}
	}

	mmPerform.defaultExpectation.params = &CallPerformerMockPerformParams{ctx, method, reqBody, respBody}
	for _, e := range mmPerform.expectations {
		if minimock.Equal(e.params, mmPerform.defaultExpectation.params) {
			mmPerform.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmPerform.defaultExpectation.params)
		}
	}

	return mmPerform
}

// Inspect accepts an inspector function that has same arguments as the callPerformer.Perform
func (mmPerform *mCallPerformerMockPerform) Inspect(f func(ctx context.Context, method string, reqBody productservice.RequestWithSettableToken, respBody any)) *mCallPerformerMockPerform {
	if mmPerform.mock.inspectFuncPerform != nil {
		mmPerform.mock.t.Fatalf("Inspect function is already set for CallPerformerMock.Perform")
	}

	mmPerform.mock.inspectFuncPerform = f

	return mmPerform
}

// Return sets up results that will be returned by callPerformer.Perform
func (mmPerform *mCallPerformerMockPerform) Return(err error) *CallPerformerMock {
	if mmPerform.mock.funcPerform != nil {
		mmPerform.mock.t.Fatalf("CallPerformerMock.Perform mock is already set by Set")
	}

	if mmPerform.defaultExpectation == nil {
		mmPerform.defaultExpectation = &CallPerformerMockPerformExpectation{mock: mmPerform.mock}
	}
	mmPerform.defaultExpectation.results = &CallPerformerMockPerformResults{err}
	return mmPerform.mock
}

// Set uses given function f to mock the callPerformer.Perform method
func (mmPerform *mCallPerformerMockPerform) Set(f func(ctx context.Context, method string, reqBody productservice.RequestWithSettableToken, respBody any) (err error)) *CallPerformerMock {
	if mmPerform.defaultExpectation != nil {
		mmPerform.mock.t.Fatalf("Default expectation is already set for the callPerformer.Perform method")
	}

	if len(mmPerform.expectations) > 0 {
		mmPerform.mock.t.Fatalf("Some expectations are already set for the callPerformer.Perform method")
	}

	mmPerform.mock.funcPerform = f
	return mmPerform.mock
}

// When sets expectation for the callPerformer.Perform which will trigger the result defined by the following
// Then helper
func (mmPerform *mCallPerformerMockPerform) When(ctx context.Context, method string, reqBody productservice.RequestWithSettableToken, respBody any) *CallPerformerMockPerformExpectation {
	if mmPerform.mock.funcPerform != nil {
		mmPerform.mock.t.Fatalf("CallPerformerMock.Perform mock is already set by Set")
	}

	expectation := &CallPerformerMockPerformExpectation{
		mock:   mmPerform.mock,
		params: &CallPerformerMockPerformParams{ctx, method, reqBody, respBody},
	}
	mmPerform.expectations = append(mmPerform.expectations, expectation)
	return expectation
}

// Then sets up callPerformer.Perform return parameters for the expectation previously defined by the When method
func (e *CallPerformerMockPerformExpectation) Then(err error) *CallPerformerMock {
	e.results = &CallPerformerMockPerformResults{err}
	return e.mock
}

// Perform implements callPerformer
func (mmPerform *CallPerformerMock) Perform(ctx context.Context, method string, reqBody productservice.RequestWithSettableToken, respBody any) (err error) {
	mm_atomic.AddUint64(&mmPerform.beforePerformCounter, 1)
	defer mm_atomic.AddUint64(&mmPerform.afterPerformCounter, 1)

	if mmPerform.inspectFuncPerform != nil {
		mmPerform.inspectFuncPerform(ctx, method, reqBody, respBody)
	}

	mm_params := CallPerformerMockPerformParams{ctx, method, reqBody, respBody}

	// Record call args
	mmPerform.PerformMock.mutex.Lock()
	mmPerform.PerformMock.callArgs = append(mmPerform.PerformMock.callArgs, &mm_params)
	mmPerform.PerformMock.mutex.Unlock()

	for _, e := range mmPerform.PerformMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmPerform.PerformMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmPerform.PerformMock.defaultExpectation.Counter, 1)
		mm_want := mmPerform.PerformMock.defaultExpectation.params
		mm_got := CallPerformerMockPerformParams{ctx, method, reqBody, respBody}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmPerform.t.Errorf("CallPerformerMock.Perform got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmPerform.PerformMock.defaultExpectation.results
		if mm_results == nil {
			mmPerform.t.Fatal("No results are set for the CallPerformerMock.Perform")
		}
		return (*mm_results).err
	}
	if mmPerform.funcPerform != nil {
		return mmPerform.funcPerform(ctx, method, reqBody, respBody)
	}
	mmPerform.t.Fatalf("Unexpected call to CallPerformerMock.Perform. %v %v %v %v", ctx, method, reqBody, respBody)
	return
}

// PerformAfterCounter returns a count of finished CallPerformerMock.Perform invocations
func (mmPerform *CallPerformerMock) PerformAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmPerform.afterPerformCounter)
}

// PerformBeforeCounter returns a count of CallPerformerMock.Perform invocations
func (mmPerform *CallPerformerMock) PerformBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmPerform.beforePerformCounter)
}

// Calls returns a list of arguments used in each call to CallPerformerMock.Perform.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmPerform *mCallPerformerMockPerform) Calls() []*CallPerformerMockPerformParams {
	mmPerform.mutex.RLock()

	argCopy := make([]*CallPerformerMockPerformParams, len(mmPerform.callArgs))
	copy(argCopy, mmPerform.callArgs)

	mmPerform.mutex.RUnlock()

	return argCopy
}

// MinimockPerformDone returns true if the count of the Perform invocations corresponds
// the number of defined expectations
func (m *CallPerformerMock) MinimockPerformDone() bool {
	for _, e := range m.PerformMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.PerformMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterPerformCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcPerform != nil && mm_atomic.LoadUint64(&m.afterPerformCounter) < 1 {
		return false
	}
	return true
}

// MinimockPerformInspect logs each unmet expectation
func (m *CallPerformerMock) MinimockPerformInspect() {
	for _, e := range m.PerformMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CallPerformerMock.Perform with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.PerformMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterPerformCounter) < 1 {
		if m.PerformMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CallPerformerMock.Perform")
		} else {
			m.t.Errorf("Expected call to CallPerformerMock.Perform with params: %#v", *m.PerformMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcPerform != nil && mm_atomic.LoadUint64(&m.afterPerformCounter) < 1 {
		m.t.Error("Expected call to CallPerformerMock.Perform")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *CallPerformerMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockPerformInspect()
			m.t.FailNow()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *CallPerformerMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *CallPerformerMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockPerformDone()
}
