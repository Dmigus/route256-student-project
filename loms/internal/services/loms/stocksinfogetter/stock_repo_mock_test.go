// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

package stocksinfogetter

//go:generate minimock -i route256.ozon.ru/project/loms/internal/usecases/stocksinfogetter.StockRepo -o stock_repo_mock_test.go -n StockRepoMock -p stocksinfogetter

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// StockRepoMock implements StockRepo
type StockRepoMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcGetNumOfAvailable          func(ctx context.Context, i1 int64) (u1 uint64, err error)
	inspectFuncGetNumOfAvailable   func(ctx context.Context, i1 int64)
	afterGetNumOfAvailableCounter  uint64
	beforeGetNumOfAvailableCounter uint64
	GetNumOfAvailableMock          mStockRepoMockGetNumOfAvailable
}

// NewStockRepoMock returns a mock for StockRepo
func NewStockRepoMock(t minimock.Tester) *StockRepoMock {
	m := &StockRepoMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetNumOfAvailableMock = mStockRepoMockGetNumOfAvailable{mock: m}
	m.GetNumOfAvailableMock.callArgs = []*StockRepoMockGetNumOfAvailableParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mStockRepoMockGetNumOfAvailable struct {
	mock               *StockRepoMock
	defaultExpectation *StockRepoMockGetNumOfAvailableExpectation
	expectations       []*StockRepoMockGetNumOfAvailableExpectation

	callArgs []*StockRepoMockGetNumOfAvailableParams
	mutex    sync.RWMutex
}

// StockRepoMockGetNumOfAvailableExpectation specifies expectation struct of the StockRepo.GetNumOfAvailable
type StockRepoMockGetNumOfAvailableExpectation struct {
	mock    *StockRepoMock
	params  *StockRepoMockGetNumOfAvailableParams
	results *StockRepoMockGetNumOfAvailableResults
	Counter uint64
}

// StockRepoMockGetNumOfAvailableParams contains parameters of the StockRepo.GetNumOfAvailable
type StockRepoMockGetNumOfAvailableParams struct {
	ctx context.Context
	i1  int64
}

// StockRepoMockGetNumOfAvailableResults contains results of the StockRepo.GetNumOfAvailable
type StockRepoMockGetNumOfAvailableResults struct {
	u1  uint64
	err error
}

// Expect sets up expected params for StockRepo.GetNumOfAvailable
func (mmGetNumOfAvailable *mStockRepoMockGetNumOfAvailable) Expect(ctx context.Context, i1 int64) *mStockRepoMockGetNumOfAvailable {
	if mmGetNumOfAvailable.mock.funcGetNumOfAvailable != nil {
		mmGetNumOfAvailable.mock.t.Fatalf("StockRepoMock.GetNumOfAvailable mock is already set by Set")
	}

	if mmGetNumOfAvailable.defaultExpectation == nil {
		mmGetNumOfAvailable.defaultExpectation = &StockRepoMockGetNumOfAvailableExpectation{}
	}

	mmGetNumOfAvailable.defaultExpectation.params = &StockRepoMockGetNumOfAvailableParams{ctx, i1}
	for _, e := range mmGetNumOfAvailable.expectations {
		if minimock.Equal(e.params, mmGetNumOfAvailable.defaultExpectation.params) {
			mmGetNumOfAvailable.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetNumOfAvailable.defaultExpectation.params)
		}
	}

	return mmGetNumOfAvailable
}

// Inspect accepts an inspector function that has same arguments as the StockRepo.GetNumOfAvailable
func (mmGetNumOfAvailable *mStockRepoMockGetNumOfAvailable) Inspect(f func(ctx context.Context, i1 int64)) *mStockRepoMockGetNumOfAvailable {
	if mmGetNumOfAvailable.mock.inspectFuncGetNumOfAvailable != nil {
		mmGetNumOfAvailable.mock.t.Fatalf("Inspect function is already set for StockRepoMock.GetNumOfAvailable")
	}

	mmGetNumOfAvailable.mock.inspectFuncGetNumOfAvailable = f

	return mmGetNumOfAvailable
}

// Return sets up results that will be returned by StockRepo.GetNumOfAvailable
func (mmGetNumOfAvailable *mStockRepoMockGetNumOfAvailable) Return(u1 uint64, err error) *StockRepoMock {
	if mmGetNumOfAvailable.mock.funcGetNumOfAvailable != nil {
		mmGetNumOfAvailable.mock.t.Fatalf("StockRepoMock.GetNumOfAvailable mock is already set by Set")
	}

	if mmGetNumOfAvailable.defaultExpectation == nil {
		mmGetNumOfAvailable.defaultExpectation = &StockRepoMockGetNumOfAvailableExpectation{mock: mmGetNumOfAvailable.mock}
	}
	mmGetNumOfAvailable.defaultExpectation.results = &StockRepoMockGetNumOfAvailableResults{u1, err}
	return mmGetNumOfAvailable.mock
}

// Set uses given function f to mock the StockRepo.GetNumOfAvailable method
func (mmGetNumOfAvailable *mStockRepoMockGetNumOfAvailable) Set(f func(ctx context.Context, i1 int64) (u1 uint64, err error)) *StockRepoMock {
	if mmGetNumOfAvailable.defaultExpectation != nil {
		mmGetNumOfAvailable.mock.t.Fatalf("Default expectation is already set for the StockRepo.GetNumOfAvailable method")
	}

	if len(mmGetNumOfAvailable.expectations) > 0 {
		mmGetNumOfAvailable.mock.t.Fatalf("Some expectations are already set for the StockRepo.GetNumOfAvailable method")
	}

	mmGetNumOfAvailable.mock.funcGetNumOfAvailable = f
	return mmGetNumOfAvailable.mock
}

// When sets expectation for the StockRepo.GetNumOfAvailable which will trigger the result defined by the following
// Then helper
func (mmGetNumOfAvailable *mStockRepoMockGetNumOfAvailable) When(ctx context.Context, i1 int64) *StockRepoMockGetNumOfAvailableExpectation {
	if mmGetNumOfAvailable.mock.funcGetNumOfAvailable != nil {
		mmGetNumOfAvailable.mock.t.Fatalf("StockRepoMock.GetNumOfAvailable mock is already set by Set")
	}

	expectation := &StockRepoMockGetNumOfAvailableExpectation{
		mock:   mmGetNumOfAvailable.mock,
		params: &StockRepoMockGetNumOfAvailableParams{ctx, i1},
	}
	mmGetNumOfAvailable.expectations = append(mmGetNumOfAvailable.expectations, expectation)
	return expectation
}

// Then sets up StockRepo.GetNumOfAvailable return parameters for the expectation previously defined by the When method
func (e *StockRepoMockGetNumOfAvailableExpectation) Then(u1 uint64, err error) *StockRepoMock {
	e.results = &StockRepoMockGetNumOfAvailableResults{u1, err}
	return e.mock
}

// GetNumOfAvailable implements StockRepo
func (mmGetNumOfAvailable *StockRepoMock) GetNumOfAvailable(ctx context.Context, i1 int64) (u1 uint64, err error) {
	mm_atomic.AddUint64(&mmGetNumOfAvailable.beforeGetNumOfAvailableCounter, 1)
	defer mm_atomic.AddUint64(&mmGetNumOfAvailable.afterGetNumOfAvailableCounter, 1)

	if mmGetNumOfAvailable.inspectFuncGetNumOfAvailable != nil {
		mmGetNumOfAvailable.inspectFuncGetNumOfAvailable(ctx, i1)
	}

	mm_params := StockRepoMockGetNumOfAvailableParams{ctx, i1}

	// Record call args
	mmGetNumOfAvailable.GetNumOfAvailableMock.mutex.Lock()
	mmGetNumOfAvailable.GetNumOfAvailableMock.callArgs = append(mmGetNumOfAvailable.GetNumOfAvailableMock.callArgs, &mm_params)
	mmGetNumOfAvailable.GetNumOfAvailableMock.mutex.Unlock()

	for _, e := range mmGetNumOfAvailable.GetNumOfAvailableMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.u1, e.results.err
		}
	}

	if mmGetNumOfAvailable.GetNumOfAvailableMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetNumOfAvailable.GetNumOfAvailableMock.defaultExpectation.Counter, 1)
		mm_want := mmGetNumOfAvailable.GetNumOfAvailableMock.defaultExpectation.params
		mm_got := StockRepoMockGetNumOfAvailableParams{ctx, i1}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetNumOfAvailable.t.Errorf("StockRepoMock.GetNumOfAvailable got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetNumOfAvailable.GetNumOfAvailableMock.defaultExpectation.results
		if mm_results == nil {
			mmGetNumOfAvailable.t.Fatal("No results are set for the StockRepoMock.GetNumOfAvailable")
		}
		return (*mm_results).u1, (*mm_results).err
	}
	if mmGetNumOfAvailable.funcGetNumOfAvailable != nil {
		return mmGetNumOfAvailable.funcGetNumOfAvailable(ctx, i1)
	}
	mmGetNumOfAvailable.t.Fatalf("Unexpected call to StockRepoMock.GetNumOfAvailable. %v %v", ctx, i1)
	return
}

// GetNumOfAvailableAfterCounter returns a count of finished StockRepoMock.GetNumOfAvailable invocations
func (mmGetNumOfAvailable *StockRepoMock) GetNumOfAvailableAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetNumOfAvailable.afterGetNumOfAvailableCounter)
}

// GetNumOfAvailableBeforeCounter returns a count of StockRepoMock.GetNumOfAvailable invocations
func (mmGetNumOfAvailable *StockRepoMock) GetNumOfAvailableBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetNumOfAvailable.beforeGetNumOfAvailableCounter)
}

// Calls returns a list of arguments used in each call to StockRepoMock.GetNumOfAvailable.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetNumOfAvailable *mStockRepoMockGetNumOfAvailable) Calls() []*StockRepoMockGetNumOfAvailableParams {
	mmGetNumOfAvailable.mutex.RLock()

	argCopy := make([]*StockRepoMockGetNumOfAvailableParams, len(mmGetNumOfAvailable.callArgs))
	copy(argCopy, mmGetNumOfAvailable.callArgs)

	mmGetNumOfAvailable.mutex.RUnlock()

	return argCopy
}

// MinimockGetNumOfAvailableDone returns true if the count of the GetNumOfAvailable invocations corresponds
// the number of defined expectations
func (m *StockRepoMock) MinimockGetNumOfAvailableDone() bool {
	for _, e := range m.GetNumOfAvailableMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetNumOfAvailableMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetNumOfAvailableCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetNumOfAvailable != nil && mm_atomic.LoadUint64(&m.afterGetNumOfAvailableCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetNumOfAvailableInspect logs each unmet expectation
func (m *StockRepoMock) MinimockGetNumOfAvailableInspect() {
	for _, e := range m.GetNumOfAvailableMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to StockRepoMock.GetNumOfAvailable with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetNumOfAvailableMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetNumOfAvailableCounter) < 1 {
		if m.GetNumOfAvailableMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to StockRepoMock.GetNumOfAvailable")
		} else {
			m.t.Errorf("Expected call to StockRepoMock.GetNumOfAvailable with params: %#v", *m.GetNumOfAvailableMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetNumOfAvailable != nil && mm_atomic.LoadUint64(&m.afterGetNumOfAvailableCounter) < 1 {
		m.t.Error("Expected call to StockRepoMock.GetNumOfAvailable")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *StockRepoMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockGetNumOfAvailableInspect()
			m.t.FailNow()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *StockRepoMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *StockRepoMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetNumOfAvailableDone()
}
