// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: queries.sql

package orders

import (
	"context"
)

const createOrder = `-- name: createOrder :one
INSERT INTO "order"(user_id, status, are_items_reserved)
VALUES ($1, $2, $3)
RETURNING id
`

type createOrderParams struct {
	UserID           int64
	Status           string
	AreItemsReserved bool
}

func (q *Queries) createOrder(ctx context.Context, arg createOrderParams) (int64, error) {
	row := q.db.QueryRow(ctx, createOrder, arg.UserID, arg.Status, arg.AreItemsReserved)
	var id int64
	err := row.Scan(&id)
	return id, err
}

type insertOrderItemParams struct {
	OrderID int64
	SkuID   int64
	Count   int32
}

const selectOrder = `-- name: selectOrder :one
SELECT user_id, status, are_items_reserved
FROM "order"
WHERE id = $1
    FOR UPDATE
`

type selectOrderRow struct {
	UserID           int64
	Status           string
	AreItemsReserved bool
}

func (q *Queries) selectOrder(ctx context.Context, id int64) (selectOrderRow, error) {
	row := q.db.QueryRow(ctx, selectOrder, id)
	var i selectOrderRow
	err := row.Scan(&i.UserID, &i.Status, &i.AreItemsReserved)
	return i, err
}

const selectOrderItems = `-- name: selectOrderItems :many
SELECT sku_id, count
FROM order_item
WHERE order_id = $1
`

type selectOrderItemsRow struct {
	SkuID int64
	Count int32
}

func (q *Queries) selectOrderItems(ctx context.Context, orderID int64) ([]selectOrderItemsRow, error) {
	rows, err := q.db.Query(ctx, selectOrderItems, orderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []selectOrderItemsRow
	for rows.Next() {
		var i selectOrderItemsRow
		if err := rows.Scan(&i.SkuID, &i.Count); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrder = `-- name: updateOrder :exec
UPDATE "order"
SET status = $2, are_items_reserved = $3
where id = $1
`

type updateOrderParams struct {
	ID               int64
	Status           string
	AreItemsReserved bool
}

func (q *Queries) updateOrder(ctx context.Context, arg updateOrderParams) error {
	_, err := q.db.Exec(ctx, updateOrder, arg.ID, arg.Status, arg.AreItemsReserved)
	return err
}
