// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

package orderscanceller

//go:generate minimock -i route256.ozon.ru/project/loms/internal/usecases/orderscanceller.stockCanceller -o stock_canceller_mock_test.go -n StockCancellerMock -p orderscanceller

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"route256.ozon.ru/project/loms/internal/models"
)

// StockCancellerMock implements stockCanceller
type StockCancellerMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcCancelReserved          func(ctx context.Context, oa1 []models.OrderItem) (err error)
	inspectFuncCancelReserved   func(ctx context.Context, oa1 []models.OrderItem)
	afterCancelReservedCounter  uint64
	beforeCancelReservedCounter uint64
	CancelReservedMock          mStockCancellerMockCancelReserved
}

// NewStockCancellerMock returns a mock for stockCanceller
func NewStockCancellerMock(t minimock.Tester) *StockCancellerMock {
	m := &StockCancellerMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CancelReservedMock = mStockCancellerMockCancelReserved{mock: m}
	m.CancelReservedMock.callArgs = []*StockCancellerMockCancelReservedParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mStockCancellerMockCancelReserved struct {
	mock               *StockCancellerMock
	defaultExpectation *StockCancellerMockCancelReservedExpectation
	expectations       []*StockCancellerMockCancelReservedExpectation

	callArgs []*StockCancellerMockCancelReservedParams
	mutex    sync.RWMutex
}

// StockCancellerMockCancelReservedExpectation specifies expectation struct of the stockCanceller.CancelReserved
type StockCancellerMockCancelReservedExpectation struct {
	mock    *StockCancellerMock
	params  *StockCancellerMockCancelReservedParams
	results *StockCancellerMockCancelReservedResults
	Counter uint64
}

// StockCancellerMockCancelReservedParams contains parameters of the stockCanceller.CancelReserved
type StockCancellerMockCancelReservedParams struct {
	ctx context.Context
	oa1 []models.OrderItem
}

// StockCancellerMockCancelReservedResults contains results of the stockCanceller.CancelReserved
type StockCancellerMockCancelReservedResults struct {
	err error
}

// Expect sets up expected params for stockCanceller.CancelReserved
func (mmCancelReserved *mStockCancellerMockCancelReserved) Expect(ctx context.Context, oa1 []models.OrderItem) *mStockCancellerMockCancelReserved {
	if mmCancelReserved.mock.funcCancelReserved != nil {
		mmCancelReserved.mock.t.Fatalf("StockCancellerMock.CancelReserved mock is already set by Set")
	}

	if mmCancelReserved.defaultExpectation == nil {
		mmCancelReserved.defaultExpectation = &StockCancellerMockCancelReservedExpectation{}
	}

	mmCancelReserved.defaultExpectation.params = &StockCancellerMockCancelReservedParams{ctx, oa1}
	for _, e := range mmCancelReserved.expectations {
		if minimock.Equal(e.params, mmCancelReserved.defaultExpectation.params) {
			mmCancelReserved.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCancelReserved.defaultExpectation.params)
		}
	}

	return mmCancelReserved
}

// Inspect accepts an inspector function that has same arguments as the stockCanceller.CancelReserved
func (mmCancelReserved *mStockCancellerMockCancelReserved) Inspect(f func(ctx context.Context, oa1 []models.OrderItem)) *mStockCancellerMockCancelReserved {
	if mmCancelReserved.mock.inspectFuncCancelReserved != nil {
		mmCancelReserved.mock.t.Fatalf("Inspect function is already set for StockCancellerMock.CancelReserved")
	}

	mmCancelReserved.mock.inspectFuncCancelReserved = f

	return mmCancelReserved
}

// Return sets up results that will be returned by stockCanceller.CancelReserved
func (mmCancelReserved *mStockCancellerMockCancelReserved) Return(err error) *StockCancellerMock {
	if mmCancelReserved.mock.funcCancelReserved != nil {
		mmCancelReserved.mock.t.Fatalf("StockCancellerMock.CancelReserved mock is already set by Set")
	}

	if mmCancelReserved.defaultExpectation == nil {
		mmCancelReserved.defaultExpectation = &StockCancellerMockCancelReservedExpectation{mock: mmCancelReserved.mock}
	}
	mmCancelReserved.defaultExpectation.results = &StockCancellerMockCancelReservedResults{err}
	return mmCancelReserved.mock
}

// Set uses given function f to mock the stockCanceller.CancelReserved method
func (mmCancelReserved *mStockCancellerMockCancelReserved) Set(f func(ctx context.Context, oa1 []models.OrderItem) (err error)) *StockCancellerMock {
	if mmCancelReserved.defaultExpectation != nil {
		mmCancelReserved.mock.t.Fatalf("Default expectation is already set for the stockCanceller.CancelReserved method")
	}

	if len(mmCancelReserved.expectations) > 0 {
		mmCancelReserved.mock.t.Fatalf("Some expectations are already set for the stockCanceller.CancelReserved method")
	}

	mmCancelReserved.mock.funcCancelReserved = f
	return mmCancelReserved.mock
}

// When sets expectation for the stockCanceller.CancelReserved which will trigger the result defined by the following
// Then helper
func (mmCancelReserved *mStockCancellerMockCancelReserved) When(ctx context.Context, oa1 []models.OrderItem) *StockCancellerMockCancelReservedExpectation {
	if mmCancelReserved.mock.funcCancelReserved != nil {
		mmCancelReserved.mock.t.Fatalf("StockCancellerMock.CancelReserved mock is already set by Set")
	}

	expectation := &StockCancellerMockCancelReservedExpectation{
		mock:   mmCancelReserved.mock,
		params: &StockCancellerMockCancelReservedParams{ctx, oa1},
	}
	mmCancelReserved.expectations = append(mmCancelReserved.expectations, expectation)
	return expectation
}

// Then sets up stockCanceller.CancelReserved return parameters for the expectation previously defined by the When method
func (e *StockCancellerMockCancelReservedExpectation) Then(err error) *StockCancellerMock {
	e.results = &StockCancellerMockCancelReservedResults{err}
	return e.mock
}

// CancelReserved implements stockCanceller
func (mmCancelReserved *StockCancellerMock) CancelReserved(ctx context.Context, oa1 []models.OrderItem) (err error) {
	mm_atomic.AddUint64(&mmCancelReserved.beforeCancelReservedCounter, 1)
	defer mm_atomic.AddUint64(&mmCancelReserved.afterCancelReservedCounter, 1)

	if mmCancelReserved.inspectFuncCancelReserved != nil {
		mmCancelReserved.inspectFuncCancelReserved(ctx, oa1)
	}

	mm_params := StockCancellerMockCancelReservedParams{ctx, oa1}

	// Record call args
	mmCancelReserved.CancelReservedMock.mutex.Lock()
	mmCancelReserved.CancelReservedMock.callArgs = append(mmCancelReserved.CancelReservedMock.callArgs, &mm_params)
	mmCancelReserved.CancelReservedMock.mutex.Unlock()

	for _, e := range mmCancelReserved.CancelReservedMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmCancelReserved.CancelReservedMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCancelReserved.CancelReservedMock.defaultExpectation.Counter, 1)
		mm_want := mmCancelReserved.CancelReservedMock.defaultExpectation.params
		mm_got := StockCancellerMockCancelReservedParams{ctx, oa1}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCancelReserved.t.Errorf("StockCancellerMock.CancelReserved got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCancelReserved.CancelReservedMock.defaultExpectation.results
		if mm_results == nil {
			mmCancelReserved.t.Fatal("No results are set for the StockCancellerMock.CancelReserved")
		}
		return (*mm_results).err
	}
	if mmCancelReserved.funcCancelReserved != nil {
		return mmCancelReserved.funcCancelReserved(ctx, oa1)
	}
	mmCancelReserved.t.Fatalf("Unexpected call to StockCancellerMock.CancelReserved. %v %v", ctx, oa1)
	return
}

// CancelReservedAfterCounter returns a count of finished StockCancellerMock.CancelReserved invocations
func (mmCancelReserved *StockCancellerMock) CancelReservedAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCancelReserved.afterCancelReservedCounter)
}

// CancelReservedBeforeCounter returns a count of StockCancellerMock.CancelReserved invocations
func (mmCancelReserved *StockCancellerMock) CancelReservedBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCancelReserved.beforeCancelReservedCounter)
}

// Calls returns a list of arguments used in each call to StockCancellerMock.CancelReserved.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCancelReserved *mStockCancellerMockCancelReserved) Calls() []*StockCancellerMockCancelReservedParams {
	mmCancelReserved.mutex.RLock()

	argCopy := make([]*StockCancellerMockCancelReservedParams, len(mmCancelReserved.callArgs))
	copy(argCopy, mmCancelReserved.callArgs)

	mmCancelReserved.mutex.RUnlock()

	return argCopy
}

// MinimockCancelReservedDone returns true if the count of the CancelReserved invocations corresponds
// the number of defined expectations
func (m *StockCancellerMock) MinimockCancelReservedDone() bool {
	for _, e := range m.CancelReservedMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CancelReservedMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCancelReservedCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCancelReserved != nil && mm_atomic.LoadUint64(&m.afterCancelReservedCounter) < 1 {
		return false
	}
	return true
}

// MinimockCancelReservedInspect logs each unmet expectation
func (m *StockCancellerMock) MinimockCancelReservedInspect() {
	for _, e := range m.CancelReservedMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to StockCancellerMock.CancelReserved with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CancelReservedMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCancelReservedCounter) < 1 {
		if m.CancelReservedMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to StockCancellerMock.CancelReserved")
		} else {
			m.t.Errorf("Expected call to StockCancellerMock.CancelReserved with params: %#v", *m.CancelReservedMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCancelReserved != nil && mm_atomic.LoadUint64(&m.afterCancelReservedCounter) < 1 {
		m.t.Error("Expected call to StockCancellerMock.CancelReserved")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *StockCancellerMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockCancelReservedInspect()
			m.t.FailNow()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *StockCancellerMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *StockCancellerMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCancelReservedDone()
}
