// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

package orderscreator

//go:generate minimock -i route256.ozon.ru/project/loms/internal/usecases/orderscreator.EventSender -o event_sender_mock_test.go -n EventSenderMock -p orderscreator

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"route256.ozon.ru/project/loms/internal/models"
)

// EventSenderMock implements EventSender
type EventSenderMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcOrderStatusChanged          func(ctx context.Context, op1 *models.Order) (err error)
	inspectFuncOrderStatusChanged   func(ctx context.Context, op1 *models.Order)
	afterOrderStatusChangedCounter  uint64
	beforeOrderStatusChangedCounter uint64
	OrderStatusChangedMock          mEventSenderMockOrderStatusChanged
}

// NewEventSenderMock returns a mock for EventSender
func NewEventSenderMock(t minimock.Tester) *EventSenderMock {
	m := &EventSenderMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.OrderStatusChangedMock = mEventSenderMockOrderStatusChanged{mock: m}
	m.OrderStatusChangedMock.callArgs = []*EventSenderMockOrderStatusChangedParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mEventSenderMockOrderStatusChanged struct {
	mock               *EventSenderMock
	defaultExpectation *EventSenderMockOrderStatusChangedExpectation
	expectations       []*EventSenderMockOrderStatusChangedExpectation

	callArgs []*EventSenderMockOrderStatusChangedParams
	mutex    sync.RWMutex
}

// EventSenderMockOrderStatusChangedExpectation specifies expectation struct of the EventSender.OrderStatusChanged
type EventSenderMockOrderStatusChangedExpectation struct {
	mock    *EventSenderMock
	params  *EventSenderMockOrderStatusChangedParams
	results *EventSenderMockOrderStatusChangedResults
	Counter uint64
}

// EventSenderMockOrderStatusChangedParams contains parameters of the EventSender.OrderStatusChanged
type EventSenderMockOrderStatusChangedParams struct {
	ctx context.Context
	op1 *models.Order
}

// EventSenderMockOrderStatusChangedResults contains results of the EventSender.OrderStatusChanged
type EventSenderMockOrderStatusChangedResults struct {
	err error
}

// Expect sets up expected params for EventSender.OrderStatusChanged
func (mmOrderStatusChanged *mEventSenderMockOrderStatusChanged) Expect(ctx context.Context, op1 *models.Order) *mEventSenderMockOrderStatusChanged {
	if mmOrderStatusChanged.mock.funcOrderStatusChanged != nil {
		mmOrderStatusChanged.mock.t.Fatalf("EventSenderMock.OrderStatusChanged mock is already set by Set")
	}

	if mmOrderStatusChanged.defaultExpectation == nil {
		mmOrderStatusChanged.defaultExpectation = &EventSenderMockOrderStatusChangedExpectation{}
	}

	mmOrderStatusChanged.defaultExpectation.params = &EventSenderMockOrderStatusChangedParams{ctx, op1}
	for _, e := range mmOrderStatusChanged.expectations {
		if minimock.Equal(e.params, mmOrderStatusChanged.defaultExpectation.params) {
			mmOrderStatusChanged.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmOrderStatusChanged.defaultExpectation.params)
		}
	}

	return mmOrderStatusChanged
}

// Inspect accepts an inspector function that has same arguments as the EventSender.OrderStatusChanged
func (mmOrderStatusChanged *mEventSenderMockOrderStatusChanged) Inspect(f func(ctx context.Context, op1 *models.Order)) *mEventSenderMockOrderStatusChanged {
	if mmOrderStatusChanged.mock.inspectFuncOrderStatusChanged != nil {
		mmOrderStatusChanged.mock.t.Fatalf("Inspect function is already set for EventSenderMock.OrderStatusChanged")
	}

	mmOrderStatusChanged.mock.inspectFuncOrderStatusChanged = f

	return mmOrderStatusChanged
}

// Return sets up results that will be returned by EventSender.OrderStatusChanged
func (mmOrderStatusChanged *mEventSenderMockOrderStatusChanged) Return(err error) *EventSenderMock {
	if mmOrderStatusChanged.mock.funcOrderStatusChanged != nil {
		mmOrderStatusChanged.mock.t.Fatalf("EventSenderMock.OrderStatusChanged mock is already set by Set")
	}

	if mmOrderStatusChanged.defaultExpectation == nil {
		mmOrderStatusChanged.defaultExpectation = &EventSenderMockOrderStatusChangedExpectation{mock: mmOrderStatusChanged.mock}
	}
	mmOrderStatusChanged.defaultExpectation.results = &EventSenderMockOrderStatusChangedResults{err}
	return mmOrderStatusChanged.mock
}

// Set uses given function f to mock the EventSender.OrderStatusChanged method
func (mmOrderStatusChanged *mEventSenderMockOrderStatusChanged) Set(f func(ctx context.Context, op1 *models.Order) (err error)) *EventSenderMock {
	if mmOrderStatusChanged.defaultExpectation != nil {
		mmOrderStatusChanged.mock.t.Fatalf("Default expectation is already set for the EventSender.OrderStatusChanged method")
	}

	if len(mmOrderStatusChanged.expectations) > 0 {
		mmOrderStatusChanged.mock.t.Fatalf("Some expectations are already set for the EventSender.OrderStatusChanged method")
	}

	mmOrderStatusChanged.mock.funcOrderStatusChanged = f
	return mmOrderStatusChanged.mock
}

// When sets expectation for the EventSender.OrderStatusChanged which will trigger the result defined by the following
// Then helper
func (mmOrderStatusChanged *mEventSenderMockOrderStatusChanged) When(ctx context.Context, op1 *models.Order) *EventSenderMockOrderStatusChangedExpectation {
	if mmOrderStatusChanged.mock.funcOrderStatusChanged != nil {
		mmOrderStatusChanged.mock.t.Fatalf("EventSenderMock.OrderStatusChanged mock is already set by Set")
	}

	expectation := &EventSenderMockOrderStatusChangedExpectation{
		mock:   mmOrderStatusChanged.mock,
		params: &EventSenderMockOrderStatusChangedParams{ctx, op1},
	}
	mmOrderStatusChanged.expectations = append(mmOrderStatusChanged.expectations, expectation)
	return expectation
}

// Then sets up EventSender.OrderStatusChanged return parameters for the expectation previously defined by the When method
func (e *EventSenderMockOrderStatusChangedExpectation) Then(err error) *EventSenderMock {
	e.results = &EventSenderMockOrderStatusChangedResults{err}
	return e.mock
}

// OrderStatusChanged implements EventSender
func (mmOrderStatusChanged *EventSenderMock) OrderStatusChanged(ctx context.Context, op1 *models.Order) (err error) {
	mm_atomic.AddUint64(&mmOrderStatusChanged.beforeOrderStatusChangedCounter, 1)
	defer mm_atomic.AddUint64(&mmOrderStatusChanged.afterOrderStatusChangedCounter, 1)

	if mmOrderStatusChanged.inspectFuncOrderStatusChanged != nil {
		mmOrderStatusChanged.inspectFuncOrderStatusChanged(ctx, op1)
	}

	mm_params := EventSenderMockOrderStatusChangedParams{ctx, op1}

	// Record call args
	mmOrderStatusChanged.OrderStatusChangedMock.mutex.Lock()
	mmOrderStatusChanged.OrderStatusChangedMock.callArgs = append(mmOrderStatusChanged.OrderStatusChangedMock.callArgs, &mm_params)
	mmOrderStatusChanged.OrderStatusChangedMock.mutex.Unlock()

	for _, e := range mmOrderStatusChanged.OrderStatusChangedMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmOrderStatusChanged.OrderStatusChangedMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmOrderStatusChanged.OrderStatusChangedMock.defaultExpectation.Counter, 1)
		mm_want := mmOrderStatusChanged.OrderStatusChangedMock.defaultExpectation.params
		mm_got := EventSenderMockOrderStatusChangedParams{ctx, op1}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmOrderStatusChanged.t.Errorf("EventSenderMock.OrderStatusChanged got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmOrderStatusChanged.OrderStatusChangedMock.defaultExpectation.results
		if mm_results == nil {
			mmOrderStatusChanged.t.Fatal("No results are set for the EventSenderMock.OrderStatusChanged")
		}
		return (*mm_results).err
	}
	if mmOrderStatusChanged.funcOrderStatusChanged != nil {
		return mmOrderStatusChanged.funcOrderStatusChanged(ctx, op1)
	}
	mmOrderStatusChanged.t.Fatalf("Unexpected call to EventSenderMock.OrderStatusChanged. %v %v", ctx, op1)
	return
}

// OrderStatusChangedAfterCounter returns a count of finished EventSenderMock.OrderStatusChanged invocations
func (mmOrderStatusChanged *EventSenderMock) OrderStatusChangedAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmOrderStatusChanged.afterOrderStatusChangedCounter)
}

// OrderStatusChangedBeforeCounter returns a count of EventSenderMock.OrderStatusChanged invocations
func (mmOrderStatusChanged *EventSenderMock) OrderStatusChangedBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmOrderStatusChanged.beforeOrderStatusChangedCounter)
}

// Calls returns a list of arguments used in each call to EventSenderMock.OrderStatusChanged.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmOrderStatusChanged *mEventSenderMockOrderStatusChanged) Calls() []*EventSenderMockOrderStatusChangedParams {
	mmOrderStatusChanged.mutex.RLock()

	argCopy := make([]*EventSenderMockOrderStatusChangedParams, len(mmOrderStatusChanged.callArgs))
	copy(argCopy, mmOrderStatusChanged.callArgs)

	mmOrderStatusChanged.mutex.RUnlock()

	return argCopy
}

// MinimockOrderStatusChangedDone returns true if the count of the OrderStatusChanged invocations corresponds
// the number of defined expectations
func (m *EventSenderMock) MinimockOrderStatusChangedDone() bool {
	for _, e := range m.OrderStatusChangedMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.OrderStatusChangedMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterOrderStatusChangedCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcOrderStatusChanged != nil && mm_atomic.LoadUint64(&m.afterOrderStatusChangedCounter) < 1 {
		return false
	}
	return true
}

// MinimockOrderStatusChangedInspect logs each unmet expectation
func (m *EventSenderMock) MinimockOrderStatusChangedInspect() {
	for _, e := range m.OrderStatusChangedMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to EventSenderMock.OrderStatusChanged with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.OrderStatusChangedMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterOrderStatusChangedCounter) < 1 {
		if m.OrderStatusChangedMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to EventSenderMock.OrderStatusChanged")
		} else {
			m.t.Errorf("Expected call to EventSenderMock.OrderStatusChanged with params: %#v", *m.OrderStatusChangedMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcOrderStatusChanged != nil && mm_atomic.LoadUint64(&m.afterOrderStatusChangedCounter) < 1 {
		m.t.Error("Expected call to EventSenderMock.OrderStatusChanged")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *EventSenderMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockOrderStatusChangedInspect()
			m.t.FailNow()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *EventSenderMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *EventSenderMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockOrderStatusChangedDone()
}
