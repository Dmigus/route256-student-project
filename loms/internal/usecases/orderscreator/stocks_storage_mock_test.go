// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

package orderscreator

//go:generate minimock -i route256.ozon.ru/project/loms/internal/usecases/orderscreator.stocksStorage -o stocks_storage_mock_test.go -n StocksStorageMock -p orderscreator

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"route256.ozon.ru/project/loms/internal/models"
)

// StocksStorageMock implements stocksStorage
type StocksStorageMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcReserve          func(ctx context.Context, oa1 []models.OrderItem) (err error)
	inspectFuncReserve   func(ctx context.Context, oa1 []models.OrderItem)
	afterReserveCounter  uint64
	beforeReserveCounter uint64
	ReserveMock          mStocksStorageMockReserve
}

// NewStocksStorageMock returns a mock for stocksStorage
func NewStocksStorageMock(t minimock.Tester) *StocksStorageMock {
	m := &StocksStorageMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.ReserveMock = mStocksStorageMockReserve{mock: m}
	m.ReserveMock.callArgs = []*StocksStorageMockReserveParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mStocksStorageMockReserve struct {
	mock               *StocksStorageMock
	defaultExpectation *StocksStorageMockReserveExpectation
	expectations       []*StocksStorageMockReserveExpectation

	callArgs []*StocksStorageMockReserveParams
	mutex    sync.RWMutex
}

// StocksStorageMockReserveExpectation specifies expectation struct of the stocksStorage.Reserve
type StocksStorageMockReserveExpectation struct {
	mock    *StocksStorageMock
	params  *StocksStorageMockReserveParams
	results *StocksStorageMockReserveResults
	Counter uint64
}

// StocksStorageMockReserveParams contains parameters of the stocksStorage.Reserve
type StocksStorageMockReserveParams struct {
	ctx context.Context
	oa1 []models.OrderItem
}

// StocksStorageMockReserveResults contains results of the stocksStorage.Reserve
type StocksStorageMockReserveResults struct {
	err error
}

// Expect sets up expected params for stocksStorage.Reserve
func (mmReserve *mStocksStorageMockReserve) Expect(ctx context.Context, oa1 []models.OrderItem) *mStocksStorageMockReserve {
	if mmReserve.mock.funcReserve != nil {
		mmReserve.mock.t.Fatalf("StocksStorageMock.Reserve mock is already set by Set")
	}

	if mmReserve.defaultExpectation == nil {
		mmReserve.defaultExpectation = &StocksStorageMockReserveExpectation{}
	}

	mmReserve.defaultExpectation.params = &StocksStorageMockReserveParams{ctx, oa1}
	for _, e := range mmReserve.expectations {
		if minimock.Equal(e.params, mmReserve.defaultExpectation.params) {
			mmReserve.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmReserve.defaultExpectation.params)
		}
	}

	return mmReserve
}

// Inspect accepts an inspector function that has same arguments as the stocksStorage.Reserve
func (mmReserve *mStocksStorageMockReserve) Inspect(f func(ctx context.Context, oa1 []models.OrderItem)) *mStocksStorageMockReserve {
	if mmReserve.mock.inspectFuncReserve != nil {
		mmReserve.mock.t.Fatalf("Inspect function is already set for StocksStorageMock.Reserve")
	}

	mmReserve.mock.inspectFuncReserve = f

	return mmReserve
}

// Return sets up results that will be returned by stocksStorage.Reserve
func (mmReserve *mStocksStorageMockReserve) Return(err error) *StocksStorageMock {
	if mmReserve.mock.funcReserve != nil {
		mmReserve.mock.t.Fatalf("StocksStorageMock.Reserve mock is already set by Set")
	}

	if mmReserve.defaultExpectation == nil {
		mmReserve.defaultExpectation = &StocksStorageMockReserveExpectation{mock: mmReserve.mock}
	}
	mmReserve.defaultExpectation.results = &StocksStorageMockReserveResults{err}
	return mmReserve.mock
}

// Set uses given function f to mock the stocksStorage.Reserve method
func (mmReserve *mStocksStorageMockReserve) Set(f func(ctx context.Context, oa1 []models.OrderItem) (err error)) *StocksStorageMock {
	if mmReserve.defaultExpectation != nil {
		mmReserve.mock.t.Fatalf("Default expectation is already set for the stocksStorage.Reserve method")
	}

	if len(mmReserve.expectations) > 0 {
		mmReserve.mock.t.Fatalf("Some expectations are already set for the stocksStorage.Reserve method")
	}

	mmReserve.mock.funcReserve = f
	return mmReserve.mock
}

// When sets expectation for the stocksStorage.Reserve which will trigger the result defined by the following
// Then helper
func (mmReserve *mStocksStorageMockReserve) When(ctx context.Context, oa1 []models.OrderItem) *StocksStorageMockReserveExpectation {
	if mmReserve.mock.funcReserve != nil {
		mmReserve.mock.t.Fatalf("StocksStorageMock.Reserve mock is already set by Set")
	}

	expectation := &StocksStorageMockReserveExpectation{
		mock:   mmReserve.mock,
		params: &StocksStorageMockReserveParams{ctx, oa1},
	}
	mmReserve.expectations = append(mmReserve.expectations, expectation)
	return expectation
}

// Then sets up stocksStorage.Reserve return parameters for the expectation previously defined by the When method
func (e *StocksStorageMockReserveExpectation) Then(err error) *StocksStorageMock {
	e.results = &StocksStorageMockReserveResults{err}
	return e.mock
}

// Reserve implements stocksStorage
func (mmReserve *StocksStorageMock) Reserve(ctx context.Context, oa1 []models.OrderItem) (err error) {
	mm_atomic.AddUint64(&mmReserve.beforeReserveCounter, 1)
	defer mm_atomic.AddUint64(&mmReserve.afterReserveCounter, 1)

	if mmReserve.inspectFuncReserve != nil {
		mmReserve.inspectFuncReserve(ctx, oa1)
	}

	mm_params := StocksStorageMockReserveParams{ctx, oa1}

	// Record call args
	mmReserve.ReserveMock.mutex.Lock()
	mmReserve.ReserveMock.callArgs = append(mmReserve.ReserveMock.callArgs, &mm_params)
	mmReserve.ReserveMock.mutex.Unlock()

	for _, e := range mmReserve.ReserveMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmReserve.ReserveMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmReserve.ReserveMock.defaultExpectation.Counter, 1)
		mm_want := mmReserve.ReserveMock.defaultExpectation.params
		mm_got := StocksStorageMockReserveParams{ctx, oa1}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmReserve.t.Errorf("StocksStorageMock.Reserve got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmReserve.ReserveMock.defaultExpectation.results
		if mm_results == nil {
			mmReserve.t.Fatal("No results are set for the StocksStorageMock.Reserve")
		}
		return (*mm_results).err
	}
	if mmReserve.funcReserve != nil {
		return mmReserve.funcReserve(ctx, oa1)
	}
	mmReserve.t.Fatalf("Unexpected call to StocksStorageMock.Reserve. %v %v", ctx, oa1)
	return
}

// ReserveAfterCounter returns a count of finished StocksStorageMock.Reserve invocations
func (mmReserve *StocksStorageMock) ReserveAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmReserve.afterReserveCounter)
}

// ReserveBeforeCounter returns a count of StocksStorageMock.Reserve invocations
func (mmReserve *StocksStorageMock) ReserveBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmReserve.beforeReserveCounter)
}

// Calls returns a list of arguments used in each call to StocksStorageMock.Reserve.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmReserve *mStocksStorageMockReserve) Calls() []*StocksStorageMockReserveParams {
	mmReserve.mutex.RLock()

	argCopy := make([]*StocksStorageMockReserveParams, len(mmReserve.callArgs))
	copy(argCopy, mmReserve.callArgs)

	mmReserve.mutex.RUnlock()

	return argCopy
}

// MinimockReserveDone returns true if the count of the Reserve invocations corresponds
// the number of defined expectations
func (m *StocksStorageMock) MinimockReserveDone() bool {
	for _, e := range m.ReserveMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ReserveMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterReserveCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcReserve != nil && mm_atomic.LoadUint64(&m.afterReserveCounter) < 1 {
		return false
	}
	return true
}

// MinimockReserveInspect logs each unmet expectation
func (m *StocksStorageMock) MinimockReserveInspect() {
	for _, e := range m.ReserveMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to StocksStorageMock.Reserve with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ReserveMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterReserveCounter) < 1 {
		if m.ReserveMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to StocksStorageMock.Reserve")
		} else {
			m.t.Errorf("Expected call to StocksStorageMock.Reserve with params: %#v", *m.ReserveMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcReserve != nil && mm_atomic.LoadUint64(&m.afterReserveCounter) < 1 {
		m.t.Error("Expected call to StocksStorageMock.Reserve")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *StocksStorageMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockReserveInspect()
			m.t.FailNow()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *StocksStorageMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *StocksStorageMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockReserveDone()
}
