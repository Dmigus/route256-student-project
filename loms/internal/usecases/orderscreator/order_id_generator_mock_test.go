// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

package orderscreator

//go:generate minimock -i route256.ozon.ru/project/loms/internal/usecases/orderscreator.orderIdGenerator -o order_id_generator_mock_test.go -n OrderIdGeneratorMock -p orderscreator

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// OrderIdGeneratorMock implements orderIdGenerator
type OrderIdGeneratorMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcNewId          func() (i1 int64)
	inspectFuncNewId   func()
	afterNewIdCounter  uint64
	beforeNewIdCounter uint64
	NewIdMock          mOrderIdGeneratorMockNewId
}

// NewOrderIdGeneratorMock returns a mock for orderIdGenerator
func NewOrderIdGeneratorMock(t minimock.Tester) *OrderIdGeneratorMock {
	m := &OrderIdGeneratorMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.NewIdMock = mOrderIdGeneratorMockNewId{mock: m}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mOrderIdGeneratorMockNewId struct {
	mock               *OrderIdGeneratorMock
	defaultExpectation *OrderIdGeneratorMockNewIdExpectation
	expectations       []*OrderIdGeneratorMockNewIdExpectation
}

// OrderIdGeneratorMockNewIdExpectation specifies expectation struct of the orderIdGenerator.NewId
type OrderIdGeneratorMockNewIdExpectation struct {
	mock *OrderIdGeneratorMock

	results *OrderIdGeneratorMockNewIdResults
	Counter uint64
}

// OrderIdGeneratorMockNewIdResults contains results of the orderIdGenerator.NewId
type OrderIdGeneratorMockNewIdResults struct {
	i1 int64
}

// Expect sets up expected params for orderIdGenerator.NewId
func (mmNewId *mOrderIdGeneratorMockNewId) Expect() *mOrderIdGeneratorMockNewId {
	if mmNewId.mock.funcNewId != nil {
		mmNewId.mock.t.Fatalf("OrderIdGeneratorMock.NewId mock is already set by Set")
	}

	if mmNewId.defaultExpectation == nil {
		mmNewId.defaultExpectation = &OrderIdGeneratorMockNewIdExpectation{}
	}

	return mmNewId
}

// Inspect accepts an inspector function that has same arguments as the orderIdGenerator.NewId
func (mmNewId *mOrderIdGeneratorMockNewId) Inspect(f func()) *mOrderIdGeneratorMockNewId {
	if mmNewId.mock.inspectFuncNewId != nil {
		mmNewId.mock.t.Fatalf("Inspect function is already set for OrderIdGeneratorMock.NewId")
	}

	mmNewId.mock.inspectFuncNewId = f

	return mmNewId
}

// Return sets up results that will be returned by orderIdGenerator.NewId
func (mmNewId *mOrderIdGeneratorMockNewId) Return(i1 int64) *OrderIdGeneratorMock {
	if mmNewId.mock.funcNewId != nil {
		mmNewId.mock.t.Fatalf("OrderIdGeneratorMock.NewId mock is already set by Set")
	}

	if mmNewId.defaultExpectation == nil {
		mmNewId.defaultExpectation = &OrderIdGeneratorMockNewIdExpectation{mock: mmNewId.mock}
	}
	mmNewId.defaultExpectation.results = &OrderIdGeneratorMockNewIdResults{i1}
	return mmNewId.mock
}

// Set uses given function f to mock the orderIdGenerator.NewId method
func (mmNewId *mOrderIdGeneratorMockNewId) Set(f func() (i1 int64)) *OrderIdGeneratorMock {
	if mmNewId.defaultExpectation != nil {
		mmNewId.mock.t.Fatalf("Default expectation is already set for the orderIdGenerator.NewId method")
	}

	if len(mmNewId.expectations) > 0 {
		mmNewId.mock.t.Fatalf("Some expectations are already set for the orderIdGenerator.NewId method")
	}

	mmNewId.mock.funcNewId = f
	return mmNewId.mock
}

// NewId implements orderIdGenerator
func (mmNewId *OrderIdGeneratorMock) NewId() (i1 int64) {
	mm_atomic.AddUint64(&mmNewId.beforeNewIdCounter, 1)
	defer mm_atomic.AddUint64(&mmNewId.afterNewIdCounter, 1)

	if mmNewId.inspectFuncNewId != nil {
		mmNewId.inspectFuncNewId()
	}

	if mmNewId.NewIdMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmNewId.NewIdMock.defaultExpectation.Counter, 1)

		mm_results := mmNewId.NewIdMock.defaultExpectation.results
		if mm_results == nil {
			mmNewId.t.Fatal("No results are set for the OrderIdGeneratorMock.NewId")
		}
		return (*mm_results).i1
	}
	if mmNewId.funcNewId != nil {
		return mmNewId.funcNewId()
	}
	mmNewId.t.Fatalf("Unexpected call to OrderIdGeneratorMock.NewId.")
	return
}

// NewIdAfterCounter returns a count of finished OrderIdGeneratorMock.NewId invocations
func (mmNewId *OrderIdGeneratorMock) NewIdAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmNewId.afterNewIdCounter)
}

// NewIdBeforeCounter returns a count of OrderIdGeneratorMock.NewId invocations
func (mmNewId *OrderIdGeneratorMock) NewIdBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmNewId.beforeNewIdCounter)
}

// MinimockNewIdDone returns true if the count of the NewId invocations corresponds
// the number of defined expectations
func (m *OrderIdGeneratorMock) MinimockNewIdDone() bool {
	for _, e := range m.NewIdMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.NewIdMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterNewIdCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcNewId != nil && mm_atomic.LoadUint64(&m.afterNewIdCounter) < 1 {
		return false
	}
	return true
}

// MinimockNewIdInspect logs each unmet expectation
func (m *OrderIdGeneratorMock) MinimockNewIdInspect() {
	for _, e := range m.NewIdMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to OrderIdGeneratorMock.NewId")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.NewIdMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterNewIdCounter) < 1 {
		m.t.Error("Expected call to OrderIdGeneratorMock.NewId")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcNewId != nil && mm_atomic.LoadUint64(&m.afterNewIdCounter) < 1 {
		m.t.Error("Expected call to OrderIdGeneratorMock.NewId")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *OrderIdGeneratorMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockNewIdInspect()
			m.t.FailNow()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *OrderIdGeneratorMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *OrderIdGeneratorMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockNewIdDone()
}
