// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

package orderspayer

//go:generate minimock -i route256.ozon.ru/project/loms/internal/usecases/orderspayer.orderRepo -o order_repo_mock_test.go -n OrderRepoMock -p orderspayer

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"route256.ozon.ru/project/loms/internal/models"
)

// OrderRepoMock implements orderRepo
type OrderRepoMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcLoad          func(ctx context.Context, i1 int64) (op1 *models.Order, err error)
	inspectFuncLoad   func(ctx context.Context, i1 int64)
	afterLoadCounter  uint64
	beforeLoadCounter uint64
	LoadMock          mOrderRepoMockLoad

	funcSave          func(ctx context.Context, op1 *models.Order) (err error)
	inspectFuncSave   func(ctx context.Context, op1 *models.Order)
	afterSaveCounter  uint64
	beforeSaveCounter uint64
	SaveMock          mOrderRepoMockSave
}

// NewOrderRepoMock returns a mock for orderRepo
func NewOrderRepoMock(t minimock.Tester) *OrderRepoMock {
	m := &OrderRepoMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.LoadMock = mOrderRepoMockLoad{mock: m}
	m.LoadMock.callArgs = []*OrderRepoMockLoadParams{}

	m.SaveMock = mOrderRepoMockSave{mock: m}
	m.SaveMock.callArgs = []*OrderRepoMockSaveParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mOrderRepoMockLoad struct {
	mock               *OrderRepoMock
	defaultExpectation *OrderRepoMockLoadExpectation
	expectations       []*OrderRepoMockLoadExpectation

	callArgs []*OrderRepoMockLoadParams
	mutex    sync.RWMutex
}

// OrderRepoMockLoadExpectation specifies expectation struct of the orderRepo.Load
type OrderRepoMockLoadExpectation struct {
	mock    *OrderRepoMock
	params  *OrderRepoMockLoadParams
	results *OrderRepoMockLoadResults
	Counter uint64
}

// OrderRepoMockLoadParams contains parameters of the orderRepo.Load
type OrderRepoMockLoadParams struct {
	ctx context.Context
	i1  int64
}

// OrderRepoMockLoadResults contains results of the orderRepo.Load
type OrderRepoMockLoadResults struct {
	op1 *models.Order
	err error
}

// Expect sets up expected params for orderRepo.Load
func (mmLoad *mOrderRepoMockLoad) Expect(ctx context.Context, i1 int64) *mOrderRepoMockLoad {
	if mmLoad.mock.funcLoad != nil {
		mmLoad.mock.t.Fatalf("OrderRepoMock.Load mock is already set by Set")
	}

	if mmLoad.defaultExpectation == nil {
		mmLoad.defaultExpectation = &OrderRepoMockLoadExpectation{}
	}

	mmLoad.defaultExpectation.params = &OrderRepoMockLoadParams{ctx, i1}
	for _, e := range mmLoad.expectations {
		if minimock.Equal(e.params, mmLoad.defaultExpectation.params) {
			mmLoad.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmLoad.defaultExpectation.params)
		}
	}

	return mmLoad
}

// Inspect accepts an inspector function that has same arguments as the orderRepo.Load
func (mmLoad *mOrderRepoMockLoad) Inspect(f func(ctx context.Context, i1 int64)) *mOrderRepoMockLoad {
	if mmLoad.mock.inspectFuncLoad != nil {
		mmLoad.mock.t.Fatalf("Inspect function is already set for OrderRepoMock.Load")
	}

	mmLoad.mock.inspectFuncLoad = f

	return mmLoad
}

// Return sets up results that will be returned by orderRepo.Load
func (mmLoad *mOrderRepoMockLoad) Return(op1 *models.Order, err error) *OrderRepoMock {
	if mmLoad.mock.funcLoad != nil {
		mmLoad.mock.t.Fatalf("OrderRepoMock.Load mock is already set by Set")
	}

	if mmLoad.defaultExpectation == nil {
		mmLoad.defaultExpectation = &OrderRepoMockLoadExpectation{mock: mmLoad.mock}
	}
	mmLoad.defaultExpectation.results = &OrderRepoMockLoadResults{op1, err}
	return mmLoad.mock
}

// Set uses given function f to mock the orderRepo.Load method
func (mmLoad *mOrderRepoMockLoad) Set(f func(ctx context.Context, i1 int64) (op1 *models.Order, err error)) *OrderRepoMock {
	if mmLoad.defaultExpectation != nil {
		mmLoad.mock.t.Fatalf("Default expectation is already set for the orderRepo.Load method")
	}

	if len(mmLoad.expectations) > 0 {
		mmLoad.mock.t.Fatalf("Some expectations are already set for the orderRepo.Load method")
	}

	mmLoad.mock.funcLoad = f
	return mmLoad.mock
}

// When sets expectation for the orderRepo.Load which will trigger the result defined by the following
// Then helper
func (mmLoad *mOrderRepoMockLoad) When(ctx context.Context, i1 int64) *OrderRepoMockLoadExpectation {
	if mmLoad.mock.funcLoad != nil {
		mmLoad.mock.t.Fatalf("OrderRepoMock.Load mock is already set by Set")
	}

	expectation := &OrderRepoMockLoadExpectation{
		mock:   mmLoad.mock,
		params: &OrderRepoMockLoadParams{ctx, i1},
	}
	mmLoad.expectations = append(mmLoad.expectations, expectation)
	return expectation
}

// Then sets up orderRepo.Load return parameters for the expectation previously defined by the When method
func (e *OrderRepoMockLoadExpectation) Then(op1 *models.Order, err error) *OrderRepoMock {
	e.results = &OrderRepoMockLoadResults{op1, err}
	return e.mock
}

// Load implements orderRepo
func (mmLoad *OrderRepoMock) Load(ctx context.Context, i1 int64) (op1 *models.Order, err error) {
	mm_atomic.AddUint64(&mmLoad.beforeLoadCounter, 1)
	defer mm_atomic.AddUint64(&mmLoad.afterLoadCounter, 1)

	if mmLoad.inspectFuncLoad != nil {
		mmLoad.inspectFuncLoad(ctx, i1)
	}

	mm_params := OrderRepoMockLoadParams{ctx, i1}

	// Record call args
	mmLoad.LoadMock.mutex.Lock()
	mmLoad.LoadMock.callArgs = append(mmLoad.LoadMock.callArgs, &mm_params)
	mmLoad.LoadMock.mutex.Unlock()

	for _, e := range mmLoad.LoadMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.op1, e.results.err
		}
	}

	if mmLoad.LoadMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmLoad.LoadMock.defaultExpectation.Counter, 1)
		mm_want := mmLoad.LoadMock.defaultExpectation.params
		mm_got := OrderRepoMockLoadParams{ctx, i1}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmLoad.t.Errorf("OrderRepoMock.Load got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmLoad.LoadMock.defaultExpectation.results
		if mm_results == nil {
			mmLoad.t.Fatal("No results are set for the OrderRepoMock.Load")
		}
		return (*mm_results).op1, (*mm_results).err
	}
	if mmLoad.funcLoad != nil {
		return mmLoad.funcLoad(ctx, i1)
	}
	mmLoad.t.Fatalf("Unexpected call to OrderRepoMock.Load. %v %v", ctx, i1)
	return
}

// LoadAfterCounter returns a count of finished OrderRepoMock.Load invocations
func (mmLoad *OrderRepoMock) LoadAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmLoad.afterLoadCounter)
}

// LoadBeforeCounter returns a count of OrderRepoMock.Load invocations
func (mmLoad *OrderRepoMock) LoadBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmLoad.beforeLoadCounter)
}

// Calls returns a list of arguments used in each call to OrderRepoMock.Load.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmLoad *mOrderRepoMockLoad) Calls() []*OrderRepoMockLoadParams {
	mmLoad.mutex.RLock()

	argCopy := make([]*OrderRepoMockLoadParams, len(mmLoad.callArgs))
	copy(argCopy, mmLoad.callArgs)

	mmLoad.mutex.RUnlock()

	return argCopy
}

// MinimockLoadDone returns true if the count of the Load invocations corresponds
// the number of defined expectations
func (m *OrderRepoMock) MinimockLoadDone() bool {
	for _, e := range m.LoadMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.LoadMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterLoadCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcLoad != nil && mm_atomic.LoadUint64(&m.afterLoadCounter) < 1 {
		return false
	}
	return true
}

// MinimockLoadInspect logs each unmet expectation
func (m *OrderRepoMock) MinimockLoadInspect() {
	for _, e := range m.LoadMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to OrderRepoMock.Load with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.LoadMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterLoadCounter) < 1 {
		if m.LoadMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to OrderRepoMock.Load")
		} else {
			m.t.Errorf("Expected call to OrderRepoMock.Load with params: %#v", *m.LoadMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcLoad != nil && mm_atomic.LoadUint64(&m.afterLoadCounter) < 1 {
		m.t.Error("Expected call to OrderRepoMock.Load")
	}
}

type mOrderRepoMockSave struct {
	mock               *OrderRepoMock
	defaultExpectation *OrderRepoMockSaveExpectation
	expectations       []*OrderRepoMockSaveExpectation

	callArgs []*OrderRepoMockSaveParams
	mutex    sync.RWMutex
}

// OrderRepoMockSaveExpectation specifies expectation struct of the orderRepo.Save
type OrderRepoMockSaveExpectation struct {
	mock    *OrderRepoMock
	params  *OrderRepoMockSaveParams
	results *OrderRepoMockSaveResults
	Counter uint64
}

// OrderRepoMockSaveParams contains parameters of the orderRepo.Save
type OrderRepoMockSaveParams struct {
	ctx context.Context
	op1 *models.Order
}

// OrderRepoMockSaveResults contains results of the orderRepo.Save
type OrderRepoMockSaveResults struct {
	err error
}

// Expect sets up expected params for orderRepo.Save
func (mmSave *mOrderRepoMockSave) Expect(ctx context.Context, op1 *models.Order) *mOrderRepoMockSave {
	if mmSave.mock.funcSave != nil {
		mmSave.mock.t.Fatalf("OrderRepoMock.Save mock is already set by Set")
	}

	if mmSave.defaultExpectation == nil {
		mmSave.defaultExpectation = &OrderRepoMockSaveExpectation{}
	}

	mmSave.defaultExpectation.params = &OrderRepoMockSaveParams{ctx, op1}
	for _, e := range mmSave.expectations {
		if minimock.Equal(e.params, mmSave.defaultExpectation.params) {
			mmSave.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSave.defaultExpectation.params)
		}
	}

	return mmSave
}

// Inspect accepts an inspector function that has same arguments as the orderRepo.Save
func (mmSave *mOrderRepoMockSave) Inspect(f func(ctx context.Context, op1 *models.Order)) *mOrderRepoMockSave {
	if mmSave.mock.inspectFuncSave != nil {
		mmSave.mock.t.Fatalf("Inspect function is already set for OrderRepoMock.Save")
	}

	mmSave.mock.inspectFuncSave = f

	return mmSave
}

// Return sets up results that will be returned by orderRepo.Save
func (mmSave *mOrderRepoMockSave) Return(err error) *OrderRepoMock {
	if mmSave.mock.funcSave != nil {
		mmSave.mock.t.Fatalf("OrderRepoMock.Save mock is already set by Set")
	}

	if mmSave.defaultExpectation == nil {
		mmSave.defaultExpectation = &OrderRepoMockSaveExpectation{mock: mmSave.mock}
	}
	mmSave.defaultExpectation.results = &OrderRepoMockSaveResults{err}
	return mmSave.mock
}

// Set uses given function f to mock the orderRepo.Save method
func (mmSave *mOrderRepoMockSave) Set(f func(ctx context.Context, op1 *models.Order) (err error)) *OrderRepoMock {
	if mmSave.defaultExpectation != nil {
		mmSave.mock.t.Fatalf("Default expectation is already set for the orderRepo.Save method")
	}

	if len(mmSave.expectations) > 0 {
		mmSave.mock.t.Fatalf("Some expectations are already set for the orderRepo.Save method")
	}

	mmSave.mock.funcSave = f
	return mmSave.mock
}

// When sets expectation for the orderRepo.Save which will trigger the result defined by the following
// Then helper
func (mmSave *mOrderRepoMockSave) When(ctx context.Context, op1 *models.Order) *OrderRepoMockSaveExpectation {
	if mmSave.mock.funcSave != nil {
		mmSave.mock.t.Fatalf("OrderRepoMock.Save mock is already set by Set")
	}

	expectation := &OrderRepoMockSaveExpectation{
		mock:   mmSave.mock,
		params: &OrderRepoMockSaveParams{ctx, op1},
	}
	mmSave.expectations = append(mmSave.expectations, expectation)
	return expectation
}

// Then sets up orderRepo.Save return parameters for the expectation previously defined by the When method
func (e *OrderRepoMockSaveExpectation) Then(err error) *OrderRepoMock {
	e.results = &OrderRepoMockSaveResults{err}
	return e.mock
}

// Save implements orderRepo
func (mmSave *OrderRepoMock) Save(ctx context.Context, op1 *models.Order) (err error) {
	mm_atomic.AddUint64(&mmSave.beforeSaveCounter, 1)
	defer mm_atomic.AddUint64(&mmSave.afterSaveCounter, 1)

	if mmSave.inspectFuncSave != nil {
		mmSave.inspectFuncSave(ctx, op1)
	}

	mm_params := OrderRepoMockSaveParams{ctx, op1}

	// Record call args
	mmSave.SaveMock.mutex.Lock()
	mmSave.SaveMock.callArgs = append(mmSave.SaveMock.callArgs, &mm_params)
	mmSave.SaveMock.mutex.Unlock()

	for _, e := range mmSave.SaveMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmSave.SaveMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSave.SaveMock.defaultExpectation.Counter, 1)
		mm_want := mmSave.SaveMock.defaultExpectation.params
		mm_got := OrderRepoMockSaveParams{ctx, op1}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmSave.t.Errorf("OrderRepoMock.Save got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmSave.SaveMock.defaultExpectation.results
		if mm_results == nil {
			mmSave.t.Fatal("No results are set for the OrderRepoMock.Save")
		}
		return (*mm_results).err
	}
	if mmSave.funcSave != nil {
		return mmSave.funcSave(ctx, op1)
	}
	mmSave.t.Fatalf("Unexpected call to OrderRepoMock.Save. %v %v", ctx, op1)
	return
}

// SaveAfterCounter returns a count of finished OrderRepoMock.Save invocations
func (mmSave *OrderRepoMock) SaveAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSave.afterSaveCounter)
}

// SaveBeforeCounter returns a count of OrderRepoMock.Save invocations
func (mmSave *OrderRepoMock) SaveBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSave.beforeSaveCounter)
}

// Calls returns a list of arguments used in each call to OrderRepoMock.Save.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSave *mOrderRepoMockSave) Calls() []*OrderRepoMockSaveParams {
	mmSave.mutex.RLock()

	argCopy := make([]*OrderRepoMockSaveParams, len(mmSave.callArgs))
	copy(argCopy, mmSave.callArgs)

	mmSave.mutex.RUnlock()

	return argCopy
}

// MinimockSaveDone returns true if the count of the Save invocations corresponds
// the number of defined expectations
func (m *OrderRepoMock) MinimockSaveDone() bool {
	for _, e := range m.SaveMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SaveMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSaveCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSave != nil && mm_atomic.LoadUint64(&m.afterSaveCounter) < 1 {
		return false
	}
	return true
}

// MinimockSaveInspect logs each unmet expectation
func (m *OrderRepoMock) MinimockSaveInspect() {
	for _, e := range m.SaveMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to OrderRepoMock.Save with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SaveMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSaveCounter) < 1 {
		if m.SaveMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to OrderRepoMock.Save")
		} else {
			m.t.Errorf("Expected call to OrderRepoMock.Save with params: %#v", *m.SaveMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSave != nil && mm_atomic.LoadUint64(&m.afterSaveCounter) < 1 {
		m.t.Error("Expected call to OrderRepoMock.Save")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *OrderRepoMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockLoadInspect()

			m.MinimockSaveInspect()
			m.t.FailNow()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *OrderRepoMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *OrderRepoMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockLoadDone() &&
		m.MinimockSaveDone()
}
