// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

package ordersgetter

//go:generate minimock -i route256.ozon.ru/project/loms/internal/usecases/ordersgetter.ordersStorage -o orders_storage_mock_test.go -n OrdersStorageMock -p ordersgetter

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"route256.ozon.ru/project/loms/internal/models"
)

// OrdersStorageMock implements ordersStorage
type OrdersStorageMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcLoad          func(ctx context.Context, i1 int64) (op1 *models.Order, err error)
	inspectFuncLoad   func(ctx context.Context, i1 int64)
	afterLoadCounter  uint64
	beforeLoadCounter uint64
	LoadMock          mOrdersStorageMockLoad
}

// NewOrdersStorageMock returns a mock for ordersStorage
func NewOrdersStorageMock(t minimock.Tester) *OrdersStorageMock {
	m := &OrdersStorageMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.LoadMock = mOrdersStorageMockLoad{mock: m}
	m.LoadMock.callArgs = []*OrdersStorageMockLoadParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mOrdersStorageMockLoad struct {
	mock               *OrdersStorageMock
	defaultExpectation *OrdersStorageMockLoadExpectation
	expectations       []*OrdersStorageMockLoadExpectation

	callArgs []*OrdersStorageMockLoadParams
	mutex    sync.RWMutex
}

// OrdersStorageMockLoadExpectation specifies expectation struct of the ordersStorage.Load
type OrdersStorageMockLoadExpectation struct {
	mock    *OrdersStorageMock
	params  *OrdersStorageMockLoadParams
	results *OrdersStorageMockLoadResults
	Counter uint64
}

// OrdersStorageMockLoadParams contains parameters of the ordersStorage.Load
type OrdersStorageMockLoadParams struct {
	ctx context.Context
	i1  int64
}

// OrdersStorageMockLoadResults contains results of the ordersStorage.Load
type OrdersStorageMockLoadResults struct {
	op1 *models.Order
	err error
}

// Expect sets up expected params for ordersStorage.Load
func (mmLoad *mOrdersStorageMockLoad) Expect(ctx context.Context, i1 int64) *mOrdersStorageMockLoad {
	if mmLoad.mock.funcLoad != nil {
		mmLoad.mock.t.Fatalf("OrdersStorageMock.Load mock is already set by Set")
	}

	if mmLoad.defaultExpectation == nil {
		mmLoad.defaultExpectation = &OrdersStorageMockLoadExpectation{}
	}

	mmLoad.defaultExpectation.params = &OrdersStorageMockLoadParams{ctx, i1}
	for _, e := range mmLoad.expectations {
		if minimock.Equal(e.params, mmLoad.defaultExpectation.params) {
			mmLoad.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmLoad.defaultExpectation.params)
		}
	}

	return mmLoad
}

// Inspect accepts an inspector function that has same arguments as the ordersStorage.Load
func (mmLoad *mOrdersStorageMockLoad) Inspect(f func(ctx context.Context, i1 int64)) *mOrdersStorageMockLoad {
	if mmLoad.mock.inspectFuncLoad != nil {
		mmLoad.mock.t.Fatalf("Inspect function is already set for OrdersStorageMock.Load")
	}

	mmLoad.mock.inspectFuncLoad = f

	return mmLoad
}

// Return sets up results that will be returned by ordersStorage.Load
func (mmLoad *mOrdersStorageMockLoad) Return(op1 *models.Order, err error) *OrdersStorageMock {
	if mmLoad.mock.funcLoad != nil {
		mmLoad.mock.t.Fatalf("OrdersStorageMock.Load mock is already set by Set")
	}

	if mmLoad.defaultExpectation == nil {
		mmLoad.defaultExpectation = &OrdersStorageMockLoadExpectation{mock: mmLoad.mock}
	}
	mmLoad.defaultExpectation.results = &OrdersStorageMockLoadResults{op1, err}
	return mmLoad.mock
}

// Set uses given function f to mock the ordersStorage.Load method
func (mmLoad *mOrdersStorageMockLoad) Set(f func(ctx context.Context, i1 int64) (op1 *models.Order, err error)) *OrdersStorageMock {
	if mmLoad.defaultExpectation != nil {
		mmLoad.mock.t.Fatalf("Default expectation is already set for the ordersStorage.Load method")
	}

	if len(mmLoad.expectations) > 0 {
		mmLoad.mock.t.Fatalf("Some expectations are already set for the ordersStorage.Load method")
	}

	mmLoad.mock.funcLoad = f
	return mmLoad.mock
}

// When sets expectation for the ordersStorage.Load which will trigger the result defined by the following
// Then helper
func (mmLoad *mOrdersStorageMockLoad) When(ctx context.Context, i1 int64) *OrdersStorageMockLoadExpectation {
	if mmLoad.mock.funcLoad != nil {
		mmLoad.mock.t.Fatalf("OrdersStorageMock.Load mock is already set by Set")
	}

	expectation := &OrdersStorageMockLoadExpectation{
		mock:   mmLoad.mock,
		params: &OrdersStorageMockLoadParams{ctx, i1},
	}
	mmLoad.expectations = append(mmLoad.expectations, expectation)
	return expectation
}

// Then sets up ordersStorage.Load return parameters for the expectation previously defined by the When method
func (e *OrdersStorageMockLoadExpectation) Then(op1 *models.Order, err error) *OrdersStorageMock {
	e.results = &OrdersStorageMockLoadResults{op1, err}
	return e.mock
}

// Load implements ordersStorage
func (mmLoad *OrdersStorageMock) Load(ctx context.Context, i1 int64) (op1 *models.Order, err error) {
	mm_atomic.AddUint64(&mmLoad.beforeLoadCounter, 1)
	defer mm_atomic.AddUint64(&mmLoad.afterLoadCounter, 1)

	if mmLoad.inspectFuncLoad != nil {
		mmLoad.inspectFuncLoad(ctx, i1)
	}

	mm_params := OrdersStorageMockLoadParams{ctx, i1}

	// Record call args
	mmLoad.LoadMock.mutex.Lock()
	mmLoad.LoadMock.callArgs = append(mmLoad.LoadMock.callArgs, &mm_params)
	mmLoad.LoadMock.mutex.Unlock()

	for _, e := range mmLoad.LoadMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.op1, e.results.err
		}
	}

	if mmLoad.LoadMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmLoad.LoadMock.defaultExpectation.Counter, 1)
		mm_want := mmLoad.LoadMock.defaultExpectation.params
		mm_got := OrdersStorageMockLoadParams{ctx, i1}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmLoad.t.Errorf("OrdersStorageMock.Load got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmLoad.LoadMock.defaultExpectation.results
		if mm_results == nil {
			mmLoad.t.Fatal("No results are set for the OrdersStorageMock.Load")
		}
		return (*mm_results).op1, (*mm_results).err
	}
	if mmLoad.funcLoad != nil {
		return mmLoad.funcLoad(ctx, i1)
	}
	mmLoad.t.Fatalf("Unexpected call to OrdersStorageMock.Load. %v %v", ctx, i1)
	return
}

// LoadAfterCounter returns a count of finished OrdersStorageMock.Load invocations
func (mmLoad *OrdersStorageMock) LoadAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmLoad.afterLoadCounter)
}

// LoadBeforeCounter returns a count of OrdersStorageMock.Load invocations
func (mmLoad *OrdersStorageMock) LoadBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmLoad.beforeLoadCounter)
}

// Calls returns a list of arguments used in each call to OrdersStorageMock.Load.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmLoad *mOrdersStorageMockLoad) Calls() []*OrdersStorageMockLoadParams {
	mmLoad.mutex.RLock()

	argCopy := make([]*OrdersStorageMockLoadParams, len(mmLoad.callArgs))
	copy(argCopy, mmLoad.callArgs)

	mmLoad.mutex.RUnlock()

	return argCopy
}

// MinimockLoadDone returns true if the count of the Load invocations corresponds
// the number of defined expectations
func (m *OrdersStorageMock) MinimockLoadDone() bool {
	for _, e := range m.LoadMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.LoadMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterLoadCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcLoad != nil && mm_atomic.LoadUint64(&m.afterLoadCounter) < 1 {
		return false
	}
	return true
}

// MinimockLoadInspect logs each unmet expectation
func (m *OrdersStorageMock) MinimockLoadInspect() {
	for _, e := range m.LoadMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to OrdersStorageMock.Load with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.LoadMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterLoadCounter) < 1 {
		if m.LoadMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to OrdersStorageMock.Load")
		} else {
			m.t.Errorf("Expected call to OrdersStorageMock.Load with params: %#v", *m.LoadMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcLoad != nil && mm_atomic.LoadUint64(&m.afterLoadCounter) < 1 {
		m.t.Error("Expected call to OrdersStorageMock.Load")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *OrdersStorageMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockLoadInspect()
			m.t.FailNow()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *OrdersStorageMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *OrdersStorageMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockLoadDone()
}
