// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: v1/loms.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LOMServiceClient is the client API for LOMService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LOMServiceClient interface {
	// Creates a new order for the user from the list of transferred goods with reservation of the required number of stocks
	OrderCreate(ctx context.Context, in *OrderCreateRequest, opts ...grpc.CallOption) (*OrderId, error)
	// Shows order information
	OrderInfo(ctx context.Context, in *OrderId, opts ...grpc.CallOption) (*OrderInfoResponse, error)
	// Marks the order as paid. Reserved items become purchased.
	OrderPay(ctx context.Context, in *OrderId, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Cancels an order, removes the reserve from all items in the order.
	OrderCancel(ctx context.Context, in *OrderId, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Returns the number of products that can be purchased.
	StocksInfo(ctx context.Context, in *StocksInfoRequest, opts ...grpc.CallOption) (*StocksInfoResponse, error)
}

type lOMServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLOMServiceClient(cc grpc.ClientConnInterface) LOMServiceClient {
	return &lOMServiceClient{cc}
}

func (c *lOMServiceClient) OrderCreate(ctx context.Context, in *OrderCreateRequest, opts ...grpc.CallOption) (*OrderId, error) {
	out := new(OrderId)
	err := c.cc.Invoke(ctx, "/LOMService/OrderCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lOMServiceClient) OrderInfo(ctx context.Context, in *OrderId, opts ...grpc.CallOption) (*OrderInfoResponse, error) {
	out := new(OrderInfoResponse)
	err := c.cc.Invoke(ctx, "/LOMService/OrderInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lOMServiceClient) OrderPay(ctx context.Context, in *OrderId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/LOMService/OrderPay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lOMServiceClient) OrderCancel(ctx context.Context, in *OrderId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/LOMService/OrderCancel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lOMServiceClient) StocksInfo(ctx context.Context, in *StocksInfoRequest, opts ...grpc.CallOption) (*StocksInfoResponse, error) {
	out := new(StocksInfoResponse)
	err := c.cc.Invoke(ctx, "/LOMService/StocksInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LOMServiceServer is the server API for LOMService service.
// All implementations must embed UnimplementedLOMServiceServer
// for forward compatibility
type LOMServiceServer interface {
	// Creates a new order for the user from the list of transferred goods with reservation of the required number of stocks
	OrderCreate(context.Context, *OrderCreateRequest) (*OrderId, error)
	// Shows order information
	OrderInfo(context.Context, *OrderId) (*OrderInfoResponse, error)
	// Marks the order as paid. Reserved items become purchased.
	OrderPay(context.Context, *OrderId) (*emptypb.Empty, error)
	// Cancels an order, removes the reserve from all items in the order.
	OrderCancel(context.Context, *OrderId) (*emptypb.Empty, error)
	// Returns the number of products that can be purchased.
	StocksInfo(context.Context, *StocksInfoRequest) (*StocksInfoResponse, error)
	mustEmbedUnimplementedLOMServiceServer()
}

// UnimplementedLOMServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLOMServiceServer struct {
}

func (UnimplementedLOMServiceServer) OrderCreate(context.Context, *OrderCreateRequest) (*OrderId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderCreate not implemented")
}
func (UnimplementedLOMServiceServer) OrderInfo(context.Context, *OrderId) (*OrderInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderInfo not implemented")
}
func (UnimplementedLOMServiceServer) OrderPay(context.Context, *OrderId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderPay not implemented")
}
func (UnimplementedLOMServiceServer) OrderCancel(context.Context, *OrderId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderCancel not implemented")
}
func (UnimplementedLOMServiceServer) StocksInfo(context.Context, *StocksInfoRequest) (*StocksInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StocksInfo not implemented")
}
func (UnimplementedLOMServiceServer) mustEmbedUnimplementedLOMServiceServer() {}

// UnsafeLOMServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LOMServiceServer will
// result in compilation errors.
type UnsafeLOMServiceServer interface {
	mustEmbedUnimplementedLOMServiceServer()
}

func RegisterLOMServiceServer(s grpc.ServiceRegistrar, srv LOMServiceServer) {
	s.RegisterService(&LOMService_ServiceDesc, srv)
}

func _LOMService_OrderCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LOMServiceServer).OrderCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LOMService/OrderCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LOMServiceServer).OrderCreate(ctx, req.(*OrderCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LOMService_OrderInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LOMServiceServer).OrderInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LOMService/OrderInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LOMServiceServer).OrderInfo(ctx, req.(*OrderId))
	}
	return interceptor(ctx, in, info, handler)
}

func _LOMService_OrderPay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LOMServiceServer).OrderPay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LOMService/OrderPay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LOMServiceServer).OrderPay(ctx, req.(*OrderId))
	}
	return interceptor(ctx, in, info, handler)
}

func _LOMService_OrderCancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LOMServiceServer).OrderCancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LOMService/OrderCancel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LOMServiceServer).OrderCancel(ctx, req.(*OrderId))
	}
	return interceptor(ctx, in, info, handler)
}

func _LOMService_StocksInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StocksInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LOMServiceServer).StocksInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LOMService/StocksInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LOMServiceServer).StocksInfo(ctx, req.(*StocksInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LOMService_ServiceDesc is the grpc.ServiceDesc for LOMService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LOMService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "LOMService",
	HandlerType: (*LOMServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OrderCreate",
			Handler:    _LOMService_OrderCreate_Handler,
		},
		{
			MethodName: "OrderInfo",
			Handler:    _LOMService_OrderInfo_Handler,
		},
		{
			MethodName: "OrderPay",
			Handler:    _LOMService_OrderPay_Handler,
		},
		{
			MethodName: "OrderCancel",
			Handler:    _LOMService_OrderCancel_Handler,
		},
		{
			MethodName: "StocksInfo",
			Handler:    _LOMService_StocksInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/loms.proto",
}
